group_by(n_tokens_binned) %>% summarise(n_articles = n()) %>%
## pass result to ggplot
ggplot(aes(x=n_tokens_binned,y=n_articles)) +
geom_bar(stat='identity',fill='green') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
geom_text(size=2, aes(label=n_articles), position=position_dodge(width=0.9), vjust=-0.25)
# We need to tokenize our already tokenized set as input for text2vec, re-use cleaned text in df_new
it <- itoken(df_new$DEclean,
tokenizer = word_tokenizer,
ids = df_new$doc,
progressbar = TRUE)
# create a vocabulary out of the tokenset (stopword removal and bi-grams are optional)
vocab <- create_vocabulary(it) # use uni-grams
# text2vec has the option to prune the vocabulary of low-frequent words
vocab <- prune_vocabulary(vocab, term_count_min = 5)
# What's in the vocabulary?
print(vocab)
# check word frequency
df_info <- df %>%
group_by(word) %>% summarize(word_freq=n()) %>%
mutate(min_5_freq = case_when(word_freq<5~'token frequency: <5',TRUE~'token frequency: >=5')) %>%
group_by(min_5_freq) %>% summarise(n_tokens = n()) %>% mutate(pct_tokens = n_tokens / sum(n_tokens))
View(df_info)
View(df_info)
# check word frequency: data_info contains information on how many of the articles contain more and less than 5 author keywords.
df %>%
group_by(word) %>% summarize(word_freq=n()) %>%
mutate(min_5_freq = case_when(word_freq<5~'token frequency: <5',TRUE~'token frequency: >=5')) %>%
group_by(min_5_freq) %>% summarise(n_tokens = n()) %>% mutate(pct_tokens = n_tokens / sum(n_tokens))
worcs::git_update()
# Loading required libraries
library(stringr)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix)
library(ggplot2)
library(dplyr)
# Required library for GloVe
library(text2vec)
# Loading script containing functions
source("word_functions.R")
# prepare data
# this is were line 891 in manuscript file starts
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# add column called doc that contains the row number.
recs[, "doc" := 1:nrow(recs)]
## Extract individual words
# create list with (separated) author keywords of each article
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
# merge_df is a function from word_function.R. In short, the function unlist() is applied to the list object that has been put into the function (in this case df) and adds the output/result of this to the new column.
df <- merge_df(recs, df, "word")
# make sure that the values in the column word do not contain any capitals.
df[, word := tolower(word)]
## Clean
# delete all the rows that contain a missing value in the column word
df <- na.omit(df, cols = "word")
## Exclude words
# create object with the terms that should be excluded
exclude_terms <- readLines("exclude_terms.txt")
# object with all the row numbers of author keywords that should be excluded from the data frame
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
# create new data frame that excludes all the row numbers that have an author keyword that should be excluded
df <- df[!exclude_these, ]
# check the number of author keywords per doc
df_n_keywords <- df %>%
group_by(doc) %>%
summarise(n_keywords = n()) # snap nog niet helemaal hoe deze code weet dat die n() dan betrekking heeft op de column word maar gaat wel goed.
## NOTE: some keywords contain more than one word, e.g. risk factors or follow-up studies and youth smoking behavior. So to now the lenght (number of words) per doc this won't work
# Now that the dataset is cleaned created a df in which each document is a row and the column DEclean contains the author keywords of the specific document. Shape the tokens back to their original form
df_new <- df %>%
group_by(word) %>%
group_by(doc) %>%
summarise(DEclean = str_c(word, collapse = " "))
# second attempt word count
df_new$DEclean_length <- sapply(df_new$DEclean, function(x){str_count(x, " ")+1})
# this gives us the number of words in the column DEclean for each row. NOTE: words that are connected by a - are seen as one word, e.g. follow-up or affect-regulatory. Also, abbreviations are also counted as a word, e.g. INFORMATION AND COMMUNICATION TECHNOLOGY (ICT). (ICT) is counted in this example.
df_new <- data.table(df_new)
# Max length of author keywords
max(df_new$DEclean_length)
# investigate with the highest value of number of author keywords
df_new[df_new$doc == 3667, 'DEclean']
# check if this is a result of data cleaning by looking at the original data set
recs[recs$doc == 3667, 'DE']
# -> shows that this is not a result of data cleaning and it seems that this article does really have 524 author keywords.
# NOTE: document/case/row shown below contains < in author keywords. Does this need to be cleaned? It also includes the word literature whereas this word was part of the terms that had to be excluded.
df_new[df_new$doc == 5234, 'DEclean']
# check why those words with literature were not excluded
df[df$doc == 5234, 'word']
# ->  they were not excluded because the regular expression ^literature$ tells to only delete those values that where start of the string is followed by literature followed by the end of the string.
# check how many unique documents and how many unique words there are after excluding non substantive words.
length(unique(df$doc))
length(unique(df$word))
# investigate with the highest value of number of author keywords
df_new[df_new$doc == 3667, 'DEclean']
View(df_new)
View(recs)
# check the doi of this article so I can look it up
recs[recs$doc == 3667, 'DI']
# -> does not have a doi so look at title
recs[recs$doc == 3667, 'TI']
# check the doi of this article so I can look it up
recs[recs$doc == 3667, 'doi']
# -> does not have a doi so look at title
recs[recs$doc == 3667, 'title']
# check the doi of this article so I can look it up
recs[recs$doc == 3667, c('doi', 'DI')]
# check the doi of this article so I can look it up
recs[recs$doc == 3667, c('doi', 'DI', 'title')]
# check the doi of this article so I can look it up
recs[recs$doc == 3667, c('doi', 'DI', 'title', 'AU')]
# check the doi of this article so I can look it up
recs[recs$doc == 3667, c('doi', 'DI', 'title', 'AU', 'PY')]
View(df_new)
# check article with 77 author keywords
recs[recs$doc == 5234, c('doi', 'DI', 'title', 'AU', 'PY')]
# check article with 77 author keywords
recs[recs$doc == 5234, c('doi', 'DI', 'title', 'AU', 'PY', 'DE')]
# check article with 33 author keywords
recs[recs$doc == 2750, c('doi', 'DI', 'title', 'AU', 'PY', 'DE')]
# check article with 33 author keywords
recs[recs$doc == 1186, c('doi', 'DI', 'title', 'AU', 'PY', 'DE')]
worcs::git_update()
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# convert object into data table
asreview_results <- as.data.table(asreview_results)
View(asreview_results)
unique(asreview_results$included)
lenght(asreview_results$included == 1)
length(asreview_results$included == 1)
length(asreview_results$included == 0)
length(asreview_results[asreview_results$included == 1])
length(asreview_results[asreview_results$included == 0])
length(asreview_results[asreview_results$included == NA])
View(asreview_results)
length(asreview_results[asreview_results$included == 0])
summary(asreview_results$included)
summary(as.factor(asreview_results$included))
asreview_results$asreview_ranking
asreview_results[, c('included', 'asreview_ranking', 'record_id')]
summary(as.factor(asreview_results$included))
823+278
559+541
max(asreview_results$asreview_ranking)
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
View(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
View(total)
total$included
summary(as.factor(total$included))
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
unique(asreview_results$included)
summary(as.factor(asreview_results$included))
asreview_results[, c('included', 'asreview_ranking', 'record_id')]
max(asreview_results$asreview_ranking)
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
total$included
summary(as.factor(total$included))
View(asreview_results)
View(total)
View(asreview_results)
worcs::git_update()
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total$notes
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
unique(asreview_results$included)
summary(as.factor(asreview_results$included))
asreview_results[, c('included', 'asreview_ranking', 'record_id')]
max(asreview_results$asreview_ranking)
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
summary(as.factor(total$included))
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total$notes
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total$rayyan
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes == "RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayan","included")]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes == "RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan","included")]
View(asreview_results)
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes == "RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", ]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", ]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"EXcluded\"}", c("rayyan", "excluded_rayyan", "included")]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")]
# -> if I merge the two datasets all the documents that were coded with a 1 (i.e. relevant/included) in the column included are dropped as well as so articles that had the value NA on the variable included?
total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")]
total[total$included == 1, c("rayyan", "excluded_rayyan", "notes")]
total[total$included==1, c("rayyan", "excluded_rayyan", "notes")]
asreview_results[total$included==1, c("rayyan", "excluded_rayyan", "notes")]
asreview_results[total$included == 1, c("notes", "rayyan", "excluded_rayyan")]
asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")]
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# check combinatie van columns notes, rayyan, excluded_rayyan en included
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
unique(asreview_results[asreview_results$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
total[total$excluded_rayyan == "True", ]
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
total[total$excluded_rayyan == "False", ]
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
unique(total$excluded_rayyan)
unique(total$included)
unique(total$rayyan)
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable notes Excluded zijn geassigned
unique(asreview_results[asreview_results$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")])
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
worcs::git_update()
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
asreview_results[asreview_results$record_id ==  96, "included"]
asreview_results[asreview_results$record_id ==  96, c("included", "title")]
asreview_results[asreview_results$doi ==  "https://doi.apa.org/doi/10.1037/fam0000574"", c("included", "title")]
asreview_results[asreview_results$doi ==  "https://doi.apa.org/doi/10.1037/fam0000574", c("included", "title")]
asreview_results[asreview_results$doi ==  "doi/10.1037/fam0000574", c("included", "title")]
asreview_results[asreview_results$doi ==  "doi.10.1037.fam0000574", c("included", "title")]
View(asreview_results)
asreview_results[asreview_results$authors ==  "CHERRY KE and GERSTEIN ED and CICIOLLA L", c("included", "title")]
asreview_results[asreview_results$authors ==  "PARSONS SK and BARLOW SE and LEVY SL and SUPRAN SE and KAPLAN SH", c("included", "title")]
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
summary(as.factor(total$included))
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
knitr::opts_chunk$set(echo = TRUE)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
View(recs)
# create new dataframe called asreview_sim to which a new column can be added
asreview_sim <- recs
# add the column included
asreview_sim$included <- 1
summary(as.factor(asreview_sim$included))
library(psych)
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- ifelse(asreview_results$included == 0, 1,)
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- asreview_results
asreview_results_rev$included <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(unique(asreview_results[asreview_results$included == is.na() & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(unique(asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")])
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]
View(asreview_results)
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- filter(asreview_results_rev, included == 0)
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- filter(asreview_results_rev$included == 0)
View(asreview_results_rev)
library(dplyr)
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- dplyr::filter(asreview_results_rev, included == 0)
# check columns of subset_irrelevant data frame asreview_sim data frame
str(asreview_results_rev)
str(asreview_sim)
View(asreview_sim)
# merge the two dataframes
asreview_simulation <- asreview_sim[asreview_results_rev]
# merge the two dataframes
asreview_simulation <- merge(asreview_results_rev, asreview_sim)
# merge the two dataframes
dt1 <- data.table(asreview_sim, key = "included")
dt2 <- data.table(asreview_results_rev, key = "included")
asreview_simulation <- dt1[dt2]
# merge the two dataframes
dt1 <- data.table(asreview_sim, key = "included")
dt2 <- data.table(subset_irrelevant, key = "included")
asreview_simulation <- dt1[dt2]
asreview_simulation <- semi_join(asreview_sim, subset_irrelevant, by = NULL, copy = FALSE)
View(asreview_simulation)
# select only those columns that are also in the asreview_sim dataframe
subset_irr <- subset_irrelevant[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "n_duplicates", "included")]
# merge the two dataframes
asreview_simulation <- merge(asreview_sim, subset_irr)
# merge the two dataframes
asreview_simulation <- rbind(asreview_sim, subset_irr)
?write.csv
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# create new dataframe called asreview_sim to which a new column can be added
asreview_sim <- recs
# add the column included
asreview_sim$included <- 1
summary(as.factor(asreview_sim$included))
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- asreview_results
asreview_results_rev$included <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly by comparing the two datasets
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- dplyr::filter(asreview_results_rev, included == 0)
# select only those columns that are also in the asreview_sim dataframe
subset_irr <- subset_irrelevant[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "n_duplicates", "included")]
# merge the two dataframes
asreview_simulation <- rbind(asreview_sim, subset_irr)
# save the dataframe
write.csv(asreview_simulation, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation.csv", row.names = FALSE)
summary(as.factor(asreview_sim$included))
summary(as.factor(asreview_simulation$included))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# explore included column and other columns from asreview
unique(asreview_results$included)
summary(as.factor(asreview_results$included))
asreview_results[, c('included', 'asreview_ranking', 'record_id')]
max(asreview_results$asreview_ranking)
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
summary(as.factor(total$included))
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable notes Excluded zijn geassigned
unique(asreview_results[asreview_results$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check unique values for recs bestand (eind selectie)
unique(total$excluded_rayyan)
unique(total$included)
unique(total$rayyan)
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[is.na(asreview$included) & asreview_results$rayan == "False", ]
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[is.na(asreview_results$included) & asreview_results$rayan == "False", ]
unique(total$included)
unique(total$rayyan)
is.na(asreview_results$included)
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
unique(asreview_results[is.na(asreview_results$included), c("notes", "rayyan", "excluded_rayyan")])
asreview_results[is.na(asreview_results$included) & asreview_results$rayyan == "False", ]
asreview_results[is.na(asreview_results$included) & asreview_results$excluded_rayyan == "False", ]
length(asreview_results[is.na(asreview_results$included) & asreview_results$excluded_rayyan == "False", ])
length(asreview_results$included == 1 | asreview_results$rayyan == "False"))
length(asreview_results$included == 1 | asreview_results$rayyan == "False")
length(asreview_results$included == 1)
unique(asreview_results)
summary(as.factor(asreview_results$included))
criteria <- asreview_results[asreview_results$included == 1 | asreview_results$rayyan == "False", ]
criteria <- asreview_results[asreview_results$rayyan == "False", ]
summary(as.factor(criteria$included))
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
test <- asreview_results
test$included2 <- ifelse(test$doi == recs$doi, 1, 0)
test$included2 <- ifelse(test$doi == recs$doi, 1, is.na())
View(test)
summary(as.factor(test$included2))
View(recs)
test2 <- asreview_results
test2$included2 <- ifelse(test2$doi %in% asreview_results$doi, 1, is.na())
summary(as.factor(test$included2))
summary(as.factor(test2$included2))
test2$included2 <- ifelse(test2$doi %in% recs$doi, 1, is.na())
test2$included2 <- ifelse(test2$doi %in% recs$doi, 1, NA)
summary(as.factor(test2$included2))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# rename the original included variable that was in the asreview_result_sysrevemotprob.csv to included_old so that we can call the new and correctly coded (1 = relevant, 0 = irrelevant) column included.
asr_results <- asreview_results
names(asr_results)[names(asr_results) == 'included'] <- 'included_old'
View(asr_results)
# create new included column in which 1 indeed indicates relevant. So all the articles that are in the data set recs have been deemed suitable for analysis so need to receive one on this new included variable.
asr_results$included <- ifelse(asr_results$doi %in% recs$doi, 1, NA)
# check if this went correctly
summary(as.factor(asr_results$included))
# give all records that have a value of 1 on the variable included_old (which was the revert coded variable) a value of 0 on the variable included
setDT(asr_results)[included_old == 1, included := 0]
# check if this went correctly
summary(as.factor(asr_results$included))
# check if this went correctly
summary(as.factor(asr_results$included))
# drop the column included_org to make sure this one is not taken as input in asreview
asr_results[ ,included_old := NULL]
# drop the column included_org to make sure this one is not taken as input in asreview
asr_results[ ,included_old := NULL]
# check if this went correctly
summary(as.factor(asr_results$included))
View(asr_results)
# check if this went correctly
summary(as.factor(asr_results$included))
# check if this went correctly
summary(as.factor(asr_results$included_old))
str(asr_results)
# check if this went correctly
summary(as.factor(asr_results$included_old))
# check if this went correctly
summary(as.factor(asr_results$included))
# save the new dataframe which also included the column abstracts
write.csv(asr_results, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation2.csv", row.names = FALSE)
wors::git_update()
worcs::git_update()
