# check the smallest cluster
cluster75 <- subset(words_with_cluster, subset = kmeans100 == 75)
# -> looks like this cluster represents related to India and Indian languages?
# check the largest cluster
cluster61 <- subset(words_with_cluster, subset = kmeans100 == 61)
# -> mostly abbreviations.
# check another large cluster
cluster89 <- subset(words_with_cluster, subset = kmeans100 == 89)
# check another large cluster
cluster94 <- subset(words_with_cluster, subset = kmeans100 == 94)
# -> again mostly abbreviations.
# check another small cluster
cluster3 <- subset(words_with_cluster, subset = kmeans100 == 3)
# -> words that compare things such as easier, fewer, stronger etc. comparative adjective.
View(cluster46)
# create new subset data frame
embedding_cluster46 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster46$word)
# fit k-means
k_means_fit3_cluster46 <- kmeans(embedding_cluster46, 3, iter.max = 30, nstart = 25)
# look at the results
# look at the size of the clusters
k_means_fit3_cluster46$size
k_means_fit3_cluster46
# Create data frame in which the merge cluster assignment back to rows/word.
words_with_cluster46_3 <- as.data.frame(cbind(row.names(embedding_cluster46), k_means_fit3_cluster46$cluster))
# add column names
names(words_with_cluster46_3) <- c("word", "kmeans3")
# make a df for the 3 cluster results
cluster46_1 <- subset(words_with_cluster46_3, subset=kmeans3 == 1)
cluster46_2 <- subset(words_with_cluster46_3, subset=kmeans3 == 2)
cluster46_3 <- subset(words_with_cluster46_3, subset=kmeans3 == 3)
# load library for visualization
library(factoextra)
# set max overlap to Inf to show all the labels in the plot. This does however make the plot unreadable
#options(ggrepel.max.overlaps = Inf)
# visualize the k-means (with k = 3) clusters
fviz_cluster(k_means_fit3_cluster46, data = embedding_cluster46,
palette = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
##  DETERMINING THE VALUE OF K
library(factoextra)
# Elbow method
fviz_nbclust(embedding_cluster46, kmeans, iter.max = 30, nstart = 25, method = "wss", k.max = 15) + geom_vline(xintercept = 11, linetype = 2) + # add line for better visualisation.
labs(subtitle = "Elbow method") # add subtitle
# -> not sure I interpret it correctly but would say the knee is at 6, 10 or 11?
# Silhouette method
fviz_nbclust(embedding_cluster46, kmeans, iter.max = 30, nstart = 25, method = "silhouette", k.max = 15) +
labs(subtitle = "Silhouette method")
# -> suggests setting k to 11 clusters
# Note that I have set nboot really low for obtaining a quick result.
# Gap statistic
fviz_nbclust(embedding_cluster46, kmeans,
iter.max = 30,
nstart = 25,
method = "gap_stat",
nboot = 5 # reduce it for lower computation time (but less precise results)
) +
labs(subtitle = "Gap statistic method")
# -> suggests 1 cluster and second best option is 10.
# try to determine number of cluster with NbClust package
library(NbClust)
nbclust_out <- NbClust(
data = embedding_cluster46,
distance = "euclidean",
min.nc = 2, # minimum number of clusters
max.nc = 15, # maximum number of clusters
method = "kmeans", # one of: "ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid", "kmeans"
index = "silhouette"
)
nbclust_out
# -> this gives a different result than the shiloutte plot. I wonder what the reason for this is.
# Another package for determine number of clusters
library(ClusterR)
Optimal_Clusters_KMeans(embedding_cluster46,
max_clusters = 15,
criterion = "distortion_fK",
fK_threshold = 0.85,
num_init = 3,
max_iters = 50,
initializer = "kmeans++",
tol = 1e-04,
plot_clusters = TRUE,
verbose = T,
tol_optimal_init = 0.3,
seed = 1)
# -> do not really know how to interpret this.
Optimal_Clusters_KMeans(embedding_cluster46, max_clusters = 15, plot_clusters = T, criterion = 'silhouette')
# ->
# RUN ANALYSIS WITH 10 CLUSTERS
# fit kmeans with 10 clusters
k_means_fit10_cluster46 <- kmeans(embedding_cluster46, 10, iter.max = 30, nstart = 25)
library(cluster)
sil <- silhouette(k_means_fit10_cluster46$cluster, dist(embedding_cluster46))
fviz_silhouette(sil)
# -> the average silhouette width is low and there are quite some negative values.
# # Create data frame in which the cluster assignment is merged back to rows/words.
words_with_cluster46_10 <- as.data.frame(cbind(row.names(embedding_cluster46), k_means_fit10_cluster46$cluster))
# add column names
names(words_with_cluster46_10) <- c("word", "kmeans10")
# cluster with highest silhouette value
cluster3_highestsil <- subset(words_with_cluster46_10, subset = kmeans10 == 3)
# cluster with second highest silhouette value
cluster7_2nd_highestsil <- subset(words_with_cluster46_10, subset = kmeans10 == 7)
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit10_cluster46, data = embedding_cluster46,
palette = c("#2E9FDF", "#00AFBB", "#E7B800", "#3CB043", "#B2D3C2", "#354A21", "#EA3C53", "#8D021F", "#8F00FF", "#a88b32", "#a83291", "#32a8a4"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
# Note that I have set nboot really low for obtaining a quick result.
# Gap statistic
fviz_nbclust(embedding_cluster46, kmeans,
iter.max = 30,
nstart = 25,
method = "gap_stat",
k.max = 15,
nboot = 5 # reduce it for lower computation time (but less precise results)
) +
labs(subtitle = "Gap statistic method")
library(RColorBrewer)
warnings()
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit10_cluster46, data = embedding_cluster46,
palette = "Spectral",
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
library(Rtsne)
warnings()
library(Rtsne)
k_means_fit$centers
plot(glove_embedding, col = k_means_fit$cluster == 1)
points(k_means_fit$center == 2,col=1:2,pch=8,cex=1)
points(k_means_fit$center == 2,col=1:2)
plot(glove_embedding, col = k_means_fit$cluster == 1)
points(k_means_fit$center == 2,)
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit$cluster == 1, data = glove_embedding,
palette = "Spectral",
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
k_means_sep_plot <- as.data.frame(k_means_fit)
test <- subset(k_means_fit$cluster == 1)
?subset()
test <- subset(k_means_fit, cluster == 1)
test <- subset(k_means_fit, k_means_fit$cluster == 1)
View(test)
test <- subset(k_means_fit, words_with_cluster$cluster == 1)
View(test)
View(embedding_cluster46)
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit, data = embedding_cluster46,
palette = "Spectral",
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit, glove_embedding = "Spectral",
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
# visualize the k-means (with k = 10) clusters
fviz_cluster(k_means_fit, glove_embedding,
palette = "Spectral",
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
warnings()
# try to add cluster assignment to glove_embedding
glove_emb_clst < glove_embedding
# try to add cluster assignment to glove_embedding
glove_emb_clst <- glove_embedding
glove_emb_clst$cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
glove_emb_clst$cluster <- k_means_fit$cluster
View(glove_embedding)
View(glove_emb_clst)
cluster_assignment <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
View(cluster_assignment)
# try to add cluster assignment to glove_embedding
glove_emb_clst <- as.data.frame(glove_embedding)
# add cluster assignment to dataframe with word vectors
glove_emb_clst$cluster <- cluster_assignment$V2
View(glove_emb_clst)
embedding_cluster91 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster91$word)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 50, verbose=TRUE, max_iter = 500)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500)
embedding_cluster91_plot <- as.data.frame(embedding_cluster91)
View(embedding_cluster91_plot)
embedding_cluster91_plot$word <- rownames(embedding_cluster91_plot)
# create plot
colors = rainbow(length(unique(embedding_cluster91_plot$word)))
names(colors) = unique(embedding_cluster91_plot$word)
plot_df <- data.frame(tsne$Y) %>%
mutate(
word = embedding_cluster91_plot$word,
col = colors[embedding_cluster91_plot$word]
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word, color = col), size = 3) +
xlab("") + ylab("") +
theme(legend.position = "none")
p
plot_df <- data.frame(tsne$Y) %>%
mutate(
word = embedding_cluster91_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
theme(legend.position = "none")
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
position_jitter(width = NULL, height = NULL, seed = NA)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
geom_jitter() +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors of Cluster containing family related words") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors of Belonging to Cluster 91") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 91") +
theme(legend.position = "none") +
theme_minimal()
p
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
plot_df <- data.frame(tsne$Y) %>%
mutate(
word = embedding_cluster91_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 91") +
theme(legend.position = "none") +
theme_minimal()
p
set.seed(88)
plot_df <- data.frame(tsne$Y) %>%
mutate(
word = embedding_cluster91_plot$word,
)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 40, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 35, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 30, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne <- Rtsne(embedding_cluster91, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
plot_df <- data.frame(tsne$Y) %>%
mutate(
word = embedding_cluster91_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 91") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 91") +
theme(legend.position = "none") +
theme_minimal()
p
# try to create plot with PCA
# Dimension reduction using PCA
res_pca <- prcomp(embedding_cluster91,  scale = FALSE)
# Coordinates of individuals
ind_coord <- as.data.frame(get_pca_ind(res_pca)$coord)
# Add clusters obtained using the K-means algorithm
ind_coord$cluster <- factor(k_means_fit$cluster)
# try to create plot with PCA
# Dimension reduction using PCA
res_pca <- prcomp(glove_embedding,  scale = FALSE)
# Coordinates of individuals
ind_coord <- as.data.frame(get_pca_ind(res_pca)$coord)
# Add clusters obtained using the K-means algorithm
ind_coord$cluster <- factor(k_means_fit$cluster)
# Add Species groups from the original data sett
ind_coord$word <- rownames(glove_embedding)
View(ind_coord)
# subset cluster 91
ind_coord_clst91 <- ind_coord[ which(ind_coord$cluster == 91), ]
View(ind_coord_clst91)
# create plot
ggscatter(ind_coord_clst91, ellipse = TRUE, ellipse.type = "euclid", size = 1.5, xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
geom_text(aes(x = "Dim.1", y = "Dim.2", label = word),  size = 3) +
ggtheme = theme_bw()
# create plot
library(ggpubr)
ggscatter(ind_coord_clst91, ellipse = TRUE, ellipse.type = "euclid", size = 1.5, xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
geom_text(aes(x = "Dim.1", y = "Dim.2", label = word),  size = 3) +
ggtheme = theme_bw()
ggscatter(ind_coord_clst91, ellipse = TRUE, ellipse.type = "euclid", size = 1.5) +
geom_text(aes(x = "Dim.1", y = "Dim.2", label = word),  size = 3) +
ggtheme = theme_bw()
ggscatter(geom_text(aes(x = "Dim.1", y = "Dim.2", label = word),  size = 3), ind_coord_clst91, ellipse = TRUE, ellipse.type = "euclid", size = 1.5)
ggscatter(
ind_coord_plot, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = TRUE, ellipse.type = "euclid",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
eigenvalue <- round(get_eigenvalue(res_pca), 1)
variance_percent <- eigenvalue$variance_percent
ggscatter(
ind_coord_plot, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = TRUE, ellipse.type = "euclid",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind_coord_clst91, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = TRUE, ellipse.type = "euclid",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
eigenvalue <- round(get_eigenvalue(res_pca), 1)
View(eigenvalue)
variance_percent <- eigenvalue$variance.percent
# subset cluster 91
ind_coord_clst91 <- ind_coord[ which(ind_coord$cluster == 91), ]
ggscatter(
ind_coord_clst91, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = FALSE, ellipse.type = "euclid",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind_coord_clst91, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = FALSE, ellipse.type = "euclid", legend = "none"
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
)
ggscatter(
ind_coord_clst91, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = FALSE, ellipse.type = "euclid", legend = "none",
ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
)
ggscatter(
ind_coord_clst91, x = "Dim.1", y = "Dim.2",
label = "word", ellipse = FALSE, ellipse.type = "euclid", legend = "none",
ggtheme = theme_minimal(),
xlab = paste0("Dim 1 (", variance_percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance_percent[2], "% )" )
)
# look at the size of the clusters
k_means_fit$size
cluster31 <- subset(words_with_cluster, subset = kmeans100 == 31)
View(cluster31)
words_with_cluster[words_with_cluster$word == "ethnicity", ]
cluster14 <- subset(words_with_cluster, subset = kmeans100 == 14)
View(cluster14)
embedding_cluster14 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster14$word)
tsne_14 <- Rtsne(embedding_cluster14, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne_14 <- Rtsne(embedding_cluster14, dims = 2, perplexity = 20, verbose=TRUE, max_iter = 500, pca = TRUE)
# create df that can be used for making the plot.
embedding_cluster14_plot <- as.data.frame(embedding_cluster14)
embedding_cluster14_plot$word <- rownames(embedding_cluster14_plot)
plot_df <- data.frame(tsne_14$Y) %>%
mutate(
word = embedding_cluster14_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 14") +
theme(legend.position = "none") +
theme_minimal()
p
# create plot of separate cluster with tsne
embedding_cluster31 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster31$word)
tsne_31 <- Rtsne(embedding_cluster31, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
# create df that can be used for making the plot.
embedding_cluster31_plot <- as.data.frame(embedding_cluster31)
embedding_cluster31_plot$word <- rownames(embedding_cluster31_plot)
tsne_31 <- Rtsne(embedding_cluster31, dims = 2, perplexity = 20, verbose=TRUE, max_iter = 500, pca = TRUE)
tsne_31 <- Rtsne(embedding_cluster31, dims = 2, perplexity = 18, verbose=TRUE, max_iter = 500, pca = TRUE)
# create df that can be used for making the plot.
embedding_cluster31_plot <- as.data.frame(embedding_cluster31)
embedding_cluster31_plot$word <- rownames(embedding_cluster31_plot)
plot_df <- data.frame(tsne_31$Y) %>%
mutate(
word = embedding_cluster31_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 2.5) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal()
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal() +
lims(-20, 25)
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal() +
ylim(-20, 25)
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal() +
xlim(-25, 25)
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal() +
xlim(-30, 25)
p
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster 31") +
theme(legend.position = "none") +
theme_minimal() +
xlim(-28, 25)
p
words_with_cluster[words_with_cluster$word == "academic", ]
words_with_cluster[words_with_cluster$word == "academia", ]
worcs::git_update()
