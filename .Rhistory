if(any(num_matches == 0)){
warning("Unmatched words found")
nomatch <- which(num_matches == 0)
tab <- table(words[nomatch])
out$unmatched <- sort(tab, decreasing = TRUE)
}
out
}
cat_words_22_3_2020 <- function(words, dict){
dict_order <- names(dict) # I'm saving these names to preserve the order, so I can sequentially match terms
dict <- dict[order(names(dict))] # Maybe skip this? And just save the order instead
rexes <- unlist(dict)
reps <- sapply(dict, length)
new_name <- rep(names(dict), times = reps)
dict_matches <- sapply(rexes, function(this_reg){
grepl(this_reg, words, perl = TRUE)})
matches <- as.data.table(dict_matches)
dropthese <- vector("numeric")
for(this_name in names(dict)){
sum_cols <- which(new_name == this_name)
if(length(sum_cols) > 1){
matches[, (this_name) := count_fun(.SD), .SDcols=sum_cols]
dropthese <- append(dropthese, sum_cols)
}
}
matches[, (dropthese):=NULL]
setcolorder(matches, names(dict))
num_matches <- rowSums(matches)
onematch <- which(num_matches == 1)
outwords <- words
outwords[onematch] <- names(dict)[apply(matches[onematch, ] == 1, 1, which)]
out <- list(
words = outwords
)
if(any(num_matches > 1)){
warning("Duplicate matches found")
dups <- unique(words[num_matches > 1])
out_dups <- lapply(dups, function(x){
tmp <- which(words == x & num_matches > 1)[1]
unname(rexes[dict_matches[tmp, ]])
})
names(out_dups) <- dups
out$dup <- out_dups
}
if(any(num_matches == 0)){
warning("Unmatched words found")
nomatch <- which(num_matches == 0)
tab <- table(words[nomatch])
out$unmatched <- sort(tab, decreasing = TRUE)
}
out
}
abstract_by_keyword <- function(keyword){
these_docs <- df$doc[which(df$word == keyword)]
print(unique(these_docs))
for(i in unique(these_docs)){
print(recs$AB[i])
readline(prompt="Press [enter] to continue")
}
}
# The order of the dictionary matters: Words are replaced by the first match in
# the dictionary. So more important categories should be listed first.
words <- c("aa", "ab", "cc", "bb")
words <- c("bb", "ba", "aa", "ab", "cc", "bb")
dict <- list(a = "a", b = "b")
# words <- c("aa", "ab", "cc", "bb")
# dict <- list(a = "a", b = "b")
# tmp <- cat_words(words, dict)
# cbind(words, tmp$words)
# dict <- dict[2:1]
# tmp <- cat_words(words, dict)
# cbind(words, tmp$words)
# words <- c("bb", "ba", "aa", "ab", "cc", "bb")
# tmp <- cat_words(words, dict)
# cbind(words, tmp$words)
# dict <- dict[2:1]
# tmp <- cat_words(words, dict)
# cbind(words, tmp$words)
# words <- df$word[56:(56+10)]
cat_words <- function(x, dict, handle_dups = c("first", "all", "random"), ...){
UseMethod("cat_words", x)
}
cat_words.data.frame <- function(x, dict, handle_dups = c("first", "all", "random"), column = "word", ...){
Args <- as.list(match.call()[-1])
Args$x <- x[[column]]
categorized <- do.call(cat_words, Args)
if(is.list(out)){
} else {
return()
}
}
cat_words.character <- function(x, dict, handle_dups = c("first", "all", "random"), ...){
rexes <- unlist(dict)
words <- x
#new_name <- rep(names(dict), times = reps)
dict_matches <- sapply(rexes, function(this_reg){
grepl(this_reg, words, perl = TRUE)})
if(is.null(dim(dict_matches))) dict_matches <- t(dict_matches)
matches <- matrix(FALSE, nrow = length(words), ncol = length(dict))
reps <- c(0, sapply(dict, length))
for(dict_item in 1:length(dict)){
sum_cols <- (sum(reps[1:dict_item])+1):sum(reps[1:(dict_item+1)])
matches[, dict_item] <- apply(dict_matches[, sum_cols, drop = FALSE], 1, any)
}
num_matches <- rowSums(matches)
has_matches <- !num_matches == 0
which_matches <- which(has_matches)
outwords <- words
outwords[has_matches] <- switch(handle_dups[1],
first = apply(matches[which_matches, ], 1, function(lv){names(dict)[min(which(lv))]}),
random = apply(matches[which_matches, ], 1, function(lv){names(dict)[sample(which(lv), 1)]}),
apply(matches[which_matches, ], 1, function(lv){names(dict)[which(lv)]})
)
out <- list(
words = outwords
)
multimatch <- num_matches > 1
if(any(multimatch)){
message("Duplicate matches found; see the '$dup' element of the output.")
dups <- unique(words[multimatch])
out_dups <- lapply(dups, function(this_dup){
these_matches <- which(words == this_dup & multimatch)[1]
unname(rexes[dict_matches[these_matches, ]])
})
names(out_dups) <- dups
out$dup <- out_dups
}
if(any(!has_matches)){
message("Unmatched words found; see the '$unmatched' element of the output.")
nomatch <- which(!has_matches)
tab <- table(words[nomatch])
out$unmatched <- sort(tab, decreasing = TRUE)
}
class(out) <- c("word_matches", class(out))
out
}
# x <- list(v1 = letters[1:3],
#           v2 = LETTERS[1:3],
#           v3 = list(c("a", "A"), c("b"), c("c", "C")),
#           v4 = list(c("a"), c("b", "1"), c("c", "1")))
merge_df <- function(df, words, col_name = "word_coded", ...){
if(!is.data.table(df)) df <- data.table(df)
if(!nrow(df) == length(words)) stop("Length of 'df' must be identical to that of 'words'.")
reps <- sapply(words, length)
out <- df[rep(1:nrow(df), times = reps), ]
out[, (col_name) := unlist(words)]
return(out)
}
cooc <- select_cooc(cooc, q = .975)
cooc <- create_cooc(dtm_top)
cooc <- select_cooc(cooc, q = .975)
attr(cooc, "thres")
write_yaml(attr(cooc, "thres"), "cooc_prune.yml")
cooc_prune <- read_yaml("cooc_prune.yml")
cooc_prune
max(term_freq_dist$Var1[term_freq_dist$pruned])
max(as.numeric(term_freq_dist$Var1)[term_freq_dist$pruned])
max(as.numeric(term_freq_dist$Var1)[!term_freq_dist$pruned])
min(term_freq_dist$Var1[term_freq_dist$pruned])
min(as.numeric(term_freq_dist$Var1)[term_freq_dist$pruned])
df_analyze <- data.table(readRDS("study2_df_analyze.RData"))
nounbydoc <- df_analyze[, list(freq = .N), by = list(doc_id = doc_id, term = word_coded)]
number_docs_words2 <- c(docs = length(unique(nounbydoc$doc_id)), words = length(unique(nounbydoc$term)))
number_docs_words2
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
topterms <- colSums(dtm)
topterms <- sort(topterms, decreasing = TRUE)
head(topterms)
topterms <- colSums(dtm)
term_freq <- table(topterms)
topterms <- sort(topterms, decreasing = TRUE)
# Select most common terms ------------------------------------------------
set.seed(720)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
term_freqtop <- table(colSums(dtm_top))
term_freq <- as.data.frame.table(term_freq)
term_freq$pruned <- term_freq$Var1 %in% names(term_freqtop)
dtm_top[1:5, 1:5]
term_freqtop <- table(colSums(dtm_top))
term_freqtop
term_freq
term_freq
names(term_freqtop)
term_freq$Var1 %in% names(term_freqtop)
term_freq$Var1
term_freq
term_freq$pruned <- term_freq[[1]] %in% names(term_freqtop)
term_freq
saveRDS(term_freq, "study2_term_freq_dist.yml")
term_freq
write_yaml(term_freq, "study2_term_freq_dist.yml")
term_freq <- read_yaml("study2_term_freq_dist.yml")
term_freq
number_docs_words2[2]
sum(term_freq$Freq[!term_freq$pruned])
max(as.numeric(term_freq[[1]][!term_freq$pruned])
)
max(as.numeric(term_freq[[1]][!term_freq$pruned]))
attr(cooc, "thres")
tmp <- cooc == 0
total_cooc <- sum(tmp[lower.tri(tmp)])
tmp
total_cooc
cooc <- select_cooc(cooc, q = .975)
tmp <- cooc == 0
total_cooc <- c(total_cooc, sum(tmp[lower.tri(tmp)]))
total_cooc
total_cooc[1]
rmarkdown::render("manuscript.Rmd")
rmarkdown::render("manuscript.Rmd")
rmarkdown::render("manuscript.Rmd")
rmarkdown::render("manuscript.Rmd")
tmp <- temdir; dir.create(tmp); oldwd = getwd(); setwd(tmp)
tmp <- temdir(); dir.create(tmp); oldwd = getwd(); setwd(tmp)
tmp <- tempdir(); dir.create(tmp); oldwd = getwd(); setwd(tmp)
list.files()
worcs_project(
path = ".",
manuscript = "none",
preregistration = "none",
add_license = "CC_BY_4.0",
use_renv = FALSE,
remote_repo = "none",
verbose = TRUE
)
worcs::worcs_project(
path = ".",
manuscript = "none",
preregistration = "none",
add_license = "CC_BY_4.0",
use_renv = FALSE,
remote_repo = "none",
verbose = TRUE
)
list.files()
getwd()
setwd(oldwd)
library("papaja")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(knitr)
library(kableExtra)
library(cowplot)
run_everything <- FALSE
notingraph <- list()
keyw <- function(x){
x
}
term_freq <- read_yaml("study2_term_freq_dist.yml")
term_freq <- yaml::read_yaml("study2_term_freq_dist.yml")
term_freq
plot(as.numeric(term_freq$topterms)[!term_freq$pruned], term_freq$Freq[!term_freq$pruned])
df_plot <- as.data.frame(term_freq)
df_plot
df_plot <- df_plot[!df_plot$pruned, ]
df_plot
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar()
library(ggplot2)
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar()
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar()
library(ggplot2)
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar()
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity")
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms")
worcs::git_update("Continued revision")
df_plot <- as.data.frame(term_freq)
df_plot
df_plot <- df_plot[!df_plot$pruned, ]
df_plot
df_plot$Freq[1]/sum(df_plot$Freq)
tmp <- readRDS("study1_term_freq_dist.yml")
tmp
df_plot <- tmp
df_plot <- df_plot[!df_plot$pruned, ]
df_plot$Freq[1]/sum(df_plot$Freq)
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms")
df_plot
ggplot(df_plot, aes(x = Var1, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms")
write_yaml(term_freq, "study1_term_freq_dist.yml")
library(yaml)
write_yaml(term_freq, "study1_term_freq_dist.yml")
write_yaml(tmp, "study1_term_freq_dist.yml")
df_plot <- as.data.frame(read_yaml("study1_term_freq_dist.yml"))
df_plot <- as.data.frame(read_yaml("study2_term_freq_dist.yml"))
df_plot <- cbind(as.data.frame(read_yaml("study1_term_freq_dist.yml")), Analysis = "Analysis 1")
df_plot <- rbind(df_plot, cbind(as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2"))
df_plot <- cbind(as.data.frame(read_yaml("study1_term_freq_dist.yml")), Analysis = "Analysis 1")
names(df_plot)[1] <- "Freq"
df_plot <- rbind(df_plot, cbind(as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2"))
as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2")
df_plot <- cbind(as.data.frame(read_yaml("study1_term_freq_dist.yml")), Analysis = "Analysis 1")
names(df_plot)[1] <- "topterms"
df_plot <- rbind(df_plot, cbind(as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2"))
df_plot <- df_plot[!df_plot$pruned, ]
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms") + facet_wrap(~Analysis)
df_plot$topterms <- ordered(df_plot$topterms)
df_plot$topterms
df_plot <- cbind(as.data.frame(read_yaml("study1_term_freq_dist.yml")), Analysis = "Analysis 1")
names(df_plot)[1] <- "topterms"
df_plot <- rbind(df_plot, cbind(as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2"))
df_plot <- df_plot[!df_plot$pruned, ]
df_plot$topterms <- ordered(df_plot$topterms, levels = sort(unique(df_plot$topterms)))
df_plot$topterms
df_plot <- cbind(as.data.frame(read_yaml("study1_term_freq_dist.yml")), Analysis = "Analysis 1")
names(df_plot)[1] <- "topterms"
df_plot <- rbind(df_plot, cbind(as.data.frame(read_yaml("study2_term_freq_dist.yml")), Analysis = "Analysis 2"))
df_plot <- df_plot[!df_plot$pruned, ]
df_plot$topterms <- ordered(df_plot$topterms, levels = sort(as.numeric(unique(df_plot$topterms))))
df_plot
df_plot$topterms
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms") + facet_wrap(~Analysis)
ggplot(df_plot, aes(x = topterms, y = Freq)) + geom_bar(stat = "identity") + theme_bw() + labs(x = "Frequency of term", y = "Number of terms") + facet_wrap(~Analysis, scales = "free")
sapply(names(dict), nchar)
max(sapply(names(dict), nchar))
nchar("Emotion regulation")
table(sapply(names(dict), nchar))
tmp <- pdftools::pdf_text("c:/tmp/garnefski2001.pdf")
tmp
tmp <- readClipboard()
tmp
tmp <- trimws(tmp)
table(tmp)
tmp <- tmp[!tmp == ""]
table(tmp)
tmp <- table(tmp)
as.data.frame.table(tmp)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp
tmp$Category[grep("(Cer\\.|[up]F)")] <- "Capacitor"
tmp
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp
tmp$Category[grep("(?<=\\d)k\\d?$", tmp$Part, perl = T)] <- "Resistor"
tmp
tmp$Category[grep("(?<=\\d)k\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp
tmp$Category[grep("(?<=\\d)n$", tmp$Part, perl = T)] <- "Capacitor"
tmp
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp
tmp[order(tmp$Category, tmp$Part), ]
tmp <- tmp[order(tmp$Category, tmp$Freq), ]
tmp
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
tmp
write.table(tmp, "clipboard", sep = "")
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
tmp <- readClipboard()
tmp
tmp <- readClipboard()
tmp
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)]
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readClipboard()
tmp <- trimws(tmp)
tmp <- tmp[!tmp == ""]
tmp <- table(tmp)
tmp <- as.data.frame.table(tmp, stringsAsFactors = F)
names(tmp)[1] <- "Part"
tmp$Category <- "Other"
tmp$Part[grep("(Input|Output)", tmp$Part)] <-"Jack connector"
tmp$Category[grep("(Cer\\.|[up]F)", tmp$Part)] <- "Capacitor"
tmp$Category[grep("(?<=\\d)[kM]\\d{0,}$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)r$", tmp$Part, perl = T)] <- "Resistor"
tmp$Category[grep("(?<=\\d)nF?$", tmp$Part, perl = T)] <- "Capacitor"
tmp$Category[grep("(LIN|LOG|taper)", tmp$Part)] <- "Potentiometer"
tmp <- tmp[order(tmp$Category, tmp$Freq, decreasing = T), ]
write.table(tmp, "clipboard", sep = "\t", row.names = F)
tmp <- readLines("action_letter.Rmd")
tmp
headers <- which(grepl("^## R", tmp))
headers
for(i in 1:length(headers)){
h = headers[i]
tmp[h] <- gsub("^## R.+?\\b", paste0("**Reviewer 1, comment ", i,":**"))
}
for(i in 1:length(headers)){
h = headers[i]
tmp[h] <- gsub("^## R.+?\\b", paste0("**Reviewer 1, comment ", i,":**"), tmp[h])
}
tmp <- readLines("action_letter.Rmd")
headers <- which(grepl("^## R", tmp))
for(i in 1:length(headers)){
h = headers[i]
tmp[h] <- gsub("^## R.+?\\b", paste0("**Reviewer 1, comment ", i,":**"), tmp[h])
}
writeLines(tmp, "action_letter.Rmd")
rmarkdown::render("manuscript/manuscript.rmd")
