geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1) ) ) )
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1)))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
scale_shapes
levels(df_plot$cat
)
class(df_plot$cat)
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(overall = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(shape = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggsave("s2_varimp.png", p, device = "png", width = 7, height = 14, units = "cm")
rmarkdown::render("manuscript.rmd")
worcs::git_update("make images grayscale friendly")
worcs::git_update("restructure discussion")
rmarkdown::render("manuscript.rmd")
renv::restore()
install.packages("DT")
renv::snapshot()
renv::restore()
renv::upgrade()
renv::restore()
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::check_installed()
p <- readRDS("s1_varimp.RData")
p
eval(p)
plot(p)
library(ggplot2)
renv::restore()
library(ggplot2)
renv::update()
renv::upgrade()
install.packages("renv")
renv::init()
renv::init()
renv::init()
gert::git_remote_remove("origin")
gert::git_remote_add("git@github.com:amyvdham/veni_sysrev.git")
gert:: git_push()
rmarkdown::render("manuscript.Rmd")
renv::restore()
rmarkdown::render("manuscript.Rmd")
install.packages("worcs", dependencies = TRUE)
worcs::git_update()
renv::status()
renv::restore()
Sys.getenv("R_MAKEVARS_USER")
writeLines(readLines("~/.R/Makevars"))
renv::status()
renv::restore()
renv::status()
renv::restore()
renv::snapshot()
worcs:: git_update()
renv::activate()
rmarkdown::render("manuscript.Rmd")
renv::status()
install.packages("papaja")
remotes::install_github("crsh/papaja", dependencies = TRUE, update = "never")
library('remotes')
install.packages("remotes")
remotes::install_github("crsh/papaja", dependencies = TRUE, update = "never")
install.packages("pattern.npl")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
library(devtools)
remotes::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
renv::status()
renv:snapshot()
renv::snapshot()
remotes::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
install.packages("devtools")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
renv:status()
renv::status()
devtools::install_github("bnosac/pattern.nlp", args = "--no-multiarch")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
install.packages("PythoninR")
install.packages("PythoninR")
install.packages("PythonInR")
install.packages("PythonInR")
install.packages("reticulate")
devtools::install_github("bnosac/pattern.nlp", args = "--no-multiarch")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
install.packages("~/Downloads/PythonInR_0.1-12.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/PythonInR_0.1-12.tar.gz", repos = NULL, type = "source")
devtools::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
install.packages("findpython")
library(findpython)
can_find_python_cmd(required_modules = "pattern.db")
n
installed.packages(PythoninR)
install.packages(‘PythonInR’)
install.packages("PythonInR")
install.packages("~/Downloads/PythonInR_0.1-11.tar.gz", repos = NULL, type = "source")
install.packages("~/Documents/Reasearch Assistant Rgit/veni_sysrev/PythonInR_0.1-11.tar.gz", repos = NULL, type = "source")
renv::install("PythoninR")
renv/library
renv::activate()
rmarkdown::render("manuscript.Rmd")
renv::status()
renv::activate()
renv::activate()
rmarkdown::render("manuscript.Rmd")
renv::status()
remotes::install_github("bnosac/pattern.nlp", INSTALL_opts = "--no-multiarch")
worcs::git_update()
renv::status()
recs <- read.csv("recs_final.csv")
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
# Extract individual words
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
# Clean
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
library(stringr)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
recs <- read.csv("recs_final.csv")
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
# Extract individual words
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
# Clean
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
View(study1details)
library(stringr)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
#run_everything = FALSE
study1details <- read_yaml("study1_details.yml")
dict <- read_yaml("yaml_dict.txt")
## Look at POS tags?
recs <- read.csv("recs_final.csv")
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
# Extract individual words
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
# Clean
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
sessionInfo()
library(stringr)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
#run_everything = FALSE
study1details <- read_yaml("study1_details.yml")
dict <- read_yaml("yaml_dict.txt")
## Look at POS tags?
recs <- read.csv("recs_final.csv")
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
# Extract individual words
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
# Clean
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
View(df)
worcs::git_update()
library(stringr)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
#run_everything = FALSE
study1details <- read_yaml("study1_details.yml")
dict <- read_yaml("yaml_dict.txt")
## Look at POS tags?
recs <- read.csv("recs_final.csv")
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
# Extract individual words
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
# Clean
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
View(study1details)
library(stringr)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
# Analysis 1:  Author keywords
#run_everything = FALSE
study1details <- read_yaml("study1_details.yml")
View(study1details)
dict <- read_yaml("yaml_dict.txt")
View(dict)
dict[["school"]]
View(dict)
## Look at POS tags?
recs <- read.csv("recs_final.csv")
View(recs)
recs <- as.data.table(recs)
if(!is.data.table(recs)){
browser()
}
View(study1details)
View(recs)
View(study1details)
View(recs)
View(recs)
summary(recs)
# if recs is not an object of type data table
# then code execution will be paused?
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
View(recs)
View(recs)
# create object that is a list with the dimensions of the recs data frame
study1details <- list(dim_recs = dim(recs))
View(study1details)
# Extract individual words
#
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
View(df)
?merge_df()
df <- merge_df(recs, df, "word")
View(df)
df[, word := tolower(word)]
View(df)
# Clean
# delete al t
df <- na.omit(df, cols = "word")
# Makes it possible to call functions that are saved in separate # R script
source("word_functions.R")
# Analysis 1:  Author keywords
# contains the dimensions of the recs dataframe
study1details <- read_yaml("study1_details.yml")
dict <- read_yaml("yaml_dict.txt")
## Look at POS tags?
# read file which contains the records into an object called recs
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# add column called doc that contains the row number.
recs[, "doc" := 1:nrow(recs)]
# create object that is a list with the dimensions of the recs data frame
study1details <- list(dim_recs = dim(recs))
# Extract individual words
# create list with author keywords of each article
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
View(df)
worcs::git_update()
