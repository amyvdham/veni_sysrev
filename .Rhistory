number_docs_words2 <- c(docs = length(unique(nounbydoc$doc_id)), words = length(unique(nounbydoc$term)))
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
topterms <- colSums(dtm)
topterms <- sort(topterms, decreasing = TRUE)
# Select most common terms ------------------------------------------------
set.seed(720)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
topterms <- colSums(dtm_top)
topterms <- sort(topterms, decreasing = TRUE)
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
write.csv(word_freq, "study2_word_freq.csv", row.names = FALSE)
df_plot <- word_freq
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Frequency <- sqrt(df_plot$Frequency)
##
topterms <- colSums(dtm_top)
baseline <- readRDS("baseline.RData")
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
df_plot <- word_freq
df_plot <- df_plot[order(df_plot$Frequency, decreasing = TRUE), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
df_plot$cat <- categ$category[match(df_plot$Word, categ$name)]
df_plot$faded <- df_plot$Word %in% baseline
# Tag words that are not in the cooccurrence graph
in_graph <- row.names(read.csv("s2_cooc.csv", row.names = 1))
notingraph <- !df_plot$Word %in% in_graph
df_plot$notingraph <- notingraph
italic_labels <- as.character(df_plot$Word)
italic_labels[notingraph] <- sapply(italic_labels[notingraph], function(x){
parse(text = paste0("italic('", x, "')"))
})
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
df_plot$cat <- ordered(df_plot$cat, levels = c("Outcome", "Indicator", "Cause", "Protective"))
write_yaml(df_plot$Word, "s2_words.yml")
set.seed(5646)
cooc <- select_cooc(create_cooc(dtm_top), q = .975)
write.csv(as.matrix(cooc), "s2_cooc.csv")
df_plot <- as_cooccurrence(cooc)
df_plot <- df_plot[!df_plot$term1 == df_plot$term2, ]
df_plot <- df_plot[order(df_plot$cooc, decreasing = TRUE), ]
df_plot$id <- apply(df_plot[, c("term1", "term2")], 1, function(x)paste0(sort(x), collapse = ""))
df_plot <- df_plot[!duplicated(df_plot$id), ]
# Create network ----------------------------------------------------------
edg <- df_plot
edg$width = edg$cooc
vert <- data.frame(name = names(topterms), label = pretty_words(names(topterms)), size = topterms)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
vert$faded <- vert$name %in% baseline
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$color[vert$faded] <- "#FFFFFF"
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
# edge thickness
E(g)$width <- scales::rescale(sqrt(E(g)$width), to = c(.2, 8))
dysreg_vertex = which(names(V(g)) == "dysregulation")
edge.start <- ends(g, es=E(g), names = FALSE)[,1]
edge.end <- ends(g, es=E(g), names = FALSE)[,2]
# Color edges based on origin:
#E(g)$color <- V(g)$color[edge.start]
E(g)$lty <- c(1, 5)[(!(edge.start == dysreg_vertex|edge.end == dysreg_vertex))+1]
set.seed(5) #4 #2 #3
l1 <- l <- layout_with_fr(g)
set.seed(3) #64
l2 <- layout_in_circle(g, order = shifter(V(g), -1))
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(1,2))
plot(g, edge.curved = 0, layout=l1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col="#777777", pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(g, edge.curved = 0, layout=l2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
})
saveRDS(g1, "s2_g1.RData")
saveRDS(g, "s2_g1.RData")
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
bl1 <- readRDS("bl_l1.RData")
bl2 <- readRDS("bl_l2.RData")
bg1 <- readRDS("bl_g1.RData")
bg2 <- readRDS("bl_g2.RData")
s1l <- readRDS("s1_l1.RData")
s2l <- readRDS("s2_l1.RData")
s1g <- readRDS("s1_g1.RData")
s2g <- readRDS("s2_g1.RData")
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
eval(p)
vertex.frame.width = 2
)
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
#legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
})
eval(p)
png("networks.png", width = 960)
eval(p)
dev.off()
svg("networks.svg", width = 14)
eval(p)
dev.off()
png("networks.png")
eval(p)
dev.off()
png("networks.png", width = 550)
eval(p)
dev.off()
png("networks.png", width = 200, units = "mm")
png("networks.png", width = 200, units = "mm", res= 300)
eval(p)
dev.off()
png("networks.png", height = 200, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
text(-1.1, y = 0, labels = "A", cex  =2)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
eval(p)
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
bl1 <- readRDS("bl_l1.RData")
bl2 <- readRDS("bl_l2.RData")
bg1 <- readRDS("bl_g1.RData")
bg2 <- readRDS("bl_g2.RData")
s1l <- readRDS("s1_l1.RData")
s2l <- readRDS("s2_l1.RData")
s1g <- readRDS("s1_g1.RData")
s2g <- readRDS("s2_g1.RData")
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = 0, labels = "A")
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
})
eval(p)
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
})
eval(p)
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(2,2))
plot(bg1, edge.curved = 0,
layout=bl1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(bg2, edge.curved = 0,
layout=bl2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "C")
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "D")
})
png("networks.png", height = 200, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
p <- quote(cowplot::plot_grid(readRDS("s1_varimp.RData")+theme(legend.position = "none")+xlab("Word frequency (Analysis 1)"), readRDS("s2_varimp.RData")+xlab("Word frequency (Analysis 2)")))
png("varimps.png", height = 200, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
rmarkdown::render("manuscript.rmd")
png("varimps.png", height = 150, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
p <- quote(cowplot::plot_grid(readRDS("s1_varimp.RData")+theme(legend.position = "none")+xlab("Word frequency (Analysis 1)"), readRDS("s2_varimp.RData")+xlab("Word frequency (Analysis 2)")))
png("varimps.png", height = 150, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
png("varimps.png", height = 120, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
png("varimps.png", height = 130, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
png("varimps.png", height = 140, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
png("varimps.png", height = 150, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
dev.off()
rmarkdown::render("manuscript.rmd")
install.packages("pdftools")
library(pdftools)
txt <- pdf_text("C:/Users/lissa102/Zotero/storage/GR3XBSYH/Coe-Odess et al. - 2019 - Emergent Emotions in Adolescence.pdf")
tail(txt)
txt <- paste0(txt, collapse = " ")
stringr::str_extract_all(txt, "\\(\\d{4}\\)")
tmp <- stringr::str_extract_all(txt, "\\(\\d{4}\\)")
txt <- pdf_text("C:/Users/lissa102/Zotero/storage/GR3XBSYH/Coe-Odess et al. - 2019 - Emergent Emotions in Adolescence.pdf")
txt <- pdf_text("C:/Users/lissa102/Zotero/storage/GR3XBSYH/Coe-Odess et al. - 2019 - Emergent Emotions in Adolescence.pdf")[21:31]
txt[1]
txt <- paste0(txt, collapse = " ")
tmp <- stringr::str_extract_all(txt, "\\(\\d{4}\\)")
tmp
length(stringr::str_extract_all(txt, "\\(\\d{4}\\)"))-7
length(stringr::str_extract_all(txt, "\\(\\d{4}\\)"))
txt <- pdf_text("C:/Users/lissa102/Zotero/storage/GR3XBSYH/Coe-Odess et al. - 2019 - Emergent Emotions in Adolescence.pdf")[21:31]
txt <- paste0(txt, collapse = " ")
tmp <- stringr::str_extract_all(txt, "\\(\\d{4}\\)")
tmp <- stringr::str_extract_all(txt, "\\(\\d{4}\\)")[[1]]
length(tmp)-7
library(lavaan)
parameterEstimates(sem("Sepal.Length ~ Petal.Length + Sepal.Width
Sepal.Width ~ Petal.Length", iris))
parameterEstimates(sem("Sepal.Length ~ yxacc * Petal.Length + ym * Sepal.Width
Sepal.Width ~ mx * Petal.Length
ind := mx * ym
yx := yxacc + ind
test := ym + (yxacc*mx)
", iris))
parameterEstimates(sem("Sepal.Length ~ Sepal.Width", iris))
parameterEstimates(sem("Sepal.Length ~ yxacc * Petal.Length + ym * Sepal.Width
Sepal.Width ~ mx * Petal.Length
ind := mx * ym
yx := yxacc + ind
test := ym - (yxacc*mx)
", iris))
parameterEstimates(sem("Sepal.Length ~ Sepal.Width", iris))
parameterEstimates(sem("Sepal.Length ~ Petal.Length", iris))
parameterEstimates(sem("Sepal.Length ~ Sepal.Width", iris))
recs <- data.table(read.csv("recs_final.csv"))
# ---- study1chunk ----
library(data.table)
#library(bibliometrix)
#library(yaml)
library(stringr)
#library(lattice)
#library(topicmodels)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
recs <- data.table(read.csv("recs_final.csv"))
recs$SR_FULL
table(recs$OA)
table(recs$OA, useNA = "always")
prop.table(table(is.na(recs$OA)))
prop.table(table(grepl("GOLD", recs$OA)))
prop.table(table(grepl("DOAJ", recs$OA)))
(6305 * 10 )/(60  * 8)
(400000 * 10 )/(60  * 8)
knitr::include_graphics("networks.png")
library("papaja")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(knitr)
library(kableExtra)
library(cowplot)
run_everything <- TRUE
notingraph <- list()
keyw <- function(x){
x
}
knitr::include_graphics("networks.png")
tmp <- readClipboard()
tmp
tmp <- tmp[grepl("@", tmp)]
tmp
tmp <- gsub("E-mail: ", "", tmp)
tmp
ant <- readClipboard()
ant
ant[ant %in% tmp]
ant <- tolower(ant)
tmp <- tolower(tmp)
ant[ant %in% tmp]
grepl("panst", ant)
any(grepl("panst", ant))
tmp[tmp %in% ant]
library(tidySEM)
library(lavaan)
#> This is lavaan 0.6-7
#> lavaan is BETA software! Please report any bugs.
library(tidySEM)
fit <- sem("mpg ~ cyl\nmpg ~ am", data = mtcars)
set.seed(4)
graph_sem(fit, label = "est_sig_std")
p <- prepare_graph(fit, label = "est_sig_std")
library(tidyr)
plot(p)
table_results(fit, columns = NULL)
edges(p)
worcs::git_update("revisions")
63/4
