# load existing word embeddings
# load glove vectors into R
vectors_glove <- data.table::fread('glove.840B.300d.txt', data.table = F,  encoding = 'UTF-8', quote="")
# rename the columns
colnames(vectors_glove) <- c('word',paste('dim',1:300,sep = '_'))
# load data frame with column with selection of words to include in analysis. For now I will only
df_incllemma <- readRDS("include_lemma.RData")
# create df in which only the words that we want to be included are kept
lemma_embedding <- subset(vectors_glove, word %in% df_incllemma$include_lemma)
# convert first column, word, to row index
library(tidyverse)
glove_embedding <- lemma_embedding %>%
remove_rownames() %>%
column_to_rownames(var = 'word')
# convert dataframe to a matrix
glove_embedding <- as.matrix(glove_embedding)
str(glove_embedding)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100)
# obtain the centroids
k_means_fit$centers
# look at the size of the clusters
k_means_fit$size
# find the cluster to which each word belongs
k_means_fit$cluster
#Merge cluster assignment back to rows
kw_with_cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
View(kw_with_cluster)
names(kw_with_cluster) <- c("word", "kmeans100")
View(kw_with_cluster)
# make a df for the first 5 cluster results, quickly "eyeball" results
cluster1 <- subset(kw_with_cluster, subset=kmeans100 == 1)
cluster2 <- subset(kw_with_cluster, subset=kmeans100 == 2)
cluster3 <- subset(kw_with_cluster, subset=kmeans100 == 3)
cluster4 <- subset(kw_with_cluster, subset=kmeans100 == 4)
cluster5 <- subset(kw_with_cluster, subset=kmeans100 == 5)
View(cluster1)
View(cluster5)
View(cluster3)
kw_with_cluster[kw_with_cluster$word == "mother", ]
# make a df of cluster 20
cluster20 <- subset(kw_with_cluster, subset=kmeans100 == 20)
View(cluster20)
# Health
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "health", ]
# make a df of cluster 20
cluster20 <- subset(kw_with_cluster, subset=kmeans100 == 79)
# make a df of cluster 20
cluster79 <- subset(kw_with_cluster, subset=kmeans100 == 79)
View(cluster79)
View(cluster20)
# Environment
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "environment", ]
# make a df of cluster 20
cluster7 <- subset(kw_with_cluster, subset=kmeans100 == 7)
View(cluster7)
# depression
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "depression", ]
# Depression
# find out in which cluster the word depression is assigned so that I can check if all the forms of depression are in there.
kw_with_cluster[kw_with_cluster$word == "depression", ]
# make a df of cluster 20
cluster48 <- subset(kw_with_cluster, subset=kmeans100 == 48)
View(cluster48)
# Kelly
# find out in which cluster the word Kelly is assigned so that I can check if all names are put together for example.
kw_with_cluster[kw_with_cluster$word == "Kelly", ]
# Kelly
# find out in which cluster the word Kelly is assigned so that I can check if all names are put together for example.
kw_with_cluster[kw_with_cluster$word == "kelly", ]
# make a df of cluster 20
cluster96 <- subset(kw_with_cluster, subset=kmeans100 == 96)
View(cluster96)
# Mother
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "mother", ]
# make a df of cluster 20
cluster20 <- subset(kw_with_cluster, subset=kmeans100 == 20)
View(cluster20)
View(cluster79)
worcs::git_update()
sqrt(5681)
75.37241/2
# load libraries
library(dplyr)
library(cluster)
library(ggplot2)
library(devtools)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load existing word embeddings
# load glove vectors into R
vectors_glove <- data.table::fread('glove.840B.300d.txt', data.table = F,  encoding = 'UTF-8', quote="")
setwd("~/Documents/Research_Assistant_Rgit/veni_sysrev/amy")
# load existing word embeddings
# load glove vectors into R
vectors_glove <- data.table::fread('glove.840B.300d.txt', data.table = F,  encoding = 'UTF-8', quote="")
# rename the columns
colnames(vectors_glove) <- c('word',paste('dim',1:300,sep = '_'))
# load data frame with column with selection of words to include in analysis. For now I will only
df_incllemma <- readRDS("include_lemma.RData")
# create df in which only the words that we want to be included are kept
lemma_embedding <- subset(vectors_glove, word %in% df_incllemma$include_lemma)
# check number of unique words
length(unique((lemma_embedding$word)))
# non-GloVe: check which words are in the included filter but are not in the feature matrix and are therefore lost (unwanted).
lost_lemma <- subset(df_incllemma, !(include_lemma %in% lemma_embedding $word))
length(unique((lemma_embedding$word))) + length(unique((lost_lemma$include_lemma)))
# ->  14195: dit is gelijk aan:
length(unique((df_incllemma$include_lemma)))
# convert first column, word, to row index
library(tidyverse)
glove_embedding <- lemma_embedding %>%
remove_rownames() %>%
column_to_rownames(var = 'word')
# convert dataframe to a matrix
glove_embedding <- as.matrix(glove_embedding)
str(glove_embedding)
library(text2vec)
find_similar_words <- function(word, embedding_matrix, n = 5) {
similarities <- embedding_matrix[word, , drop = FALSE] %>%
sim2(embedding_matrix, y = ., method = "cosine")
similarities[, 1] %>% sort(decreasing = TRUE) %>% head(n)
}
find_similar_words("health",glove_embedding,25)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100, iter.max = 30)
# obtain the centroids
k_means_fit$centers
# look at the size of the clusters
k_means_fit$size
# find the cluster to which each word belongs
k_means_fit$cluster
# Create data frame in which the merge cluster assignment back to rows/word.
kw_with_cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
# add column names
names(kw_with_cluster) <- c("word", "kmeans100")
# make a df for the first 5 cluster results, quickly "eyeball" results
cluster1 <- subset(kw_with_cluster, subset=kmeans100 == 1)
View(cluster1)
cluster2 <- subset(kw_with_cluster, subset=kmeans100 == 2)
cluster3 <- subset(kw_with_cluster, subset=kmeans100 == 3)
cluster4 <- subset(kw_with_cluster, subset=kmeans100 == 4)
cluster5 <- subset(kw_with_cluster, subset=kmeans100 == 5)
View(cluster3)
# Mother
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "mother", ]
# make a df of cluster 20
cluster95 <- subset(kw_with_cluster, subset=kmeans100 == 95)
View(cluster95)
# Health
# find out in which cluster the word health is assigned
kw_with_cluster[kw_with_cluster$word == "health", ]
# make a df of cluster 79
cluster74 <- subset(kw_with_cluster, subset=kmeans100 == 74)
View(cluster74)
set.seed(8)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100, iter.max = 30)
View(cluster95)
View(cluster95)
# obtain the centroids
k_means_fit$centers
# look at the size of the clusters
k_means_fit$size
# find the cluster to which each word belongs
k_means_fit$cluster
# Create data frame in which the merge cluster assignment back to rows/word.
kw_with_cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
# add column names
names(kw_with_cluster) <- c("word", "kmeans100")
# make a df for the first 5 cluster results, quickly "eyeball" results
cluster1 <- subset(kw_with_cluster, subset=kmeans100 == 1)
cluster2 <- subset(kw_with_cluster, subset=kmeans100 == 2)
cluster3 <- subset(kw_with_cluster, subset=kmeans100 == 3)
cluster4 <- subset(kw_with_cluster, subset=kmeans100 == 4)
cluster5 <- subset(kw_with_cluster, subset=kmeans100 == 5)
# Mother
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "mother", ]
# make a df of cluster 20
cluster26 <- subset(kw_with_cluster, subset=kmeans100 == 26)
View(cluster26)
View(cluster95)
# I did not setseeded the cluster analysis yet so want to compare the difference between the two clusters
diff_setseed <- subset(cluster26, !(word %in% cluster95$word))
View(diff_setseed)
# I did not setseeded the cluster analysis yet so want to compare the difference between the two clusters
diff_setseed <- subset(cluster95, !(word %in% cluster26$word))
View(diff_setseed)
set.seed(88)
set.seed(88)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100, iter.max = 30)
# obtain the centroids
k_means_fit$centers
# look at the size of the clusters
k_means_fit$size
# find the cluster to which each word belongs
k_means_fit$cluster
# Create data frame in which the merge cluster assignment back to rows/word.
kw_with_cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
# add column names
names(kw_with_cluster) <- c("word", "kmeans100")
# make a df for the first 5 cluster results, quickly "eyeball" results
cluster1 <- subset(kw_with_cluster, subset=kmeans100 == 1)
cluster2 <- subset(kw_with_cluster, subset=kmeans100 == 2)
cluster3 <- subset(kw_with_cluster, subset=kmeans100 == 3)
cluster4 <- subset(kw_with_cluster, subset=kmeans100 == 4)
cluster5 <- subset(kw_with_cluster, subset=kmeans100 == 5)
# Mother
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "mother", ]
# make a df of cluster 26
cluster6 <- subset(kw_with_cluster, subset=kmeans100 == 6)
View(cluster6)
# I did not setseeded the cluster analysis yet so want to compare the difference between the two clusters that contain the word mother. -> Can not rerun this code now that I have set.seeded the analysis but it is important to be aware that every time you run the analysis and do not set.seed, the clusters will be different. The 3 times I have now run the analyis the cluster containing mother had either 71, 70 or 86 observations.
diff_setseed <- subset(cluster6, !(word %in% cluster26$word))
View(diff_setseed)
# Health
# find out in which cluster the word health is assigned
kw_with_cluster[kw_with_cluster$word == "health", ]
# make a df of cluster 55
cluster55 <- subset(kw_with_cluster, subset=kmeans100 == 55)
View(cluster55)
# Environment
# find out in which cluster the word environment is assigned
kw_with_cluster[kw_with_cluster$word == "environment", ]
# make a df of cluster 75
cluster75 <- subset(kw_with_cluster, subset=kmeans100 == 75)
View(cluster75)
# Depression
# find out in which cluster the word depression is assigned so that I can check if all the forms of depression are in there.
kw_with_cluster[kw_with_cluster$word == "depression", ]
# make a df of cluster 48
cluster35 <- subset(kw_with_cluster, subset=kmeans100 == 35)
View(cluster35)
# Kelly
# find out in which cluster the word Kelly is assigned so that I can check if all names are put together for example.
kw_with_cluster[kw_with_cluster$word == "kelly", ]
# make a df of cluster 80
cluster80 <- subset(kw_with_cluster, subset=kmeans100 == 80)
View(cluster80)
# cortisol
# find out in which cluster the word Kelly is assigned so that I can check if all names are put together for example.
kw_with_cluster[kw_with_cluster$word == "cortisol", ]
# make a df of cluster 90
cluster90 <- subset(kw_with_cluster, subset=kmeans100 == 90)
View(cluster90)
## Selecting ‘k’ Using ‘Elbow Method’
# accumulator for cost results
cost_df <- data.frame()
# run kmeans for all clusters up to 100
for(i in 1:100){
# Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=dtm, centers=i, iter.max=100)
# Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
# run kmeans for all clusters up to 100
for(i in 1:200){
# Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=glove_embedding, centers=i, iter.max=100)
# Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(glove_embedding, nc=200)
warnings()
# empathy
# find out in which cluster the word Kelly is assigned so that I can check if all names are put together for example.
kw_with_cluster[kw_with_cluster$word == "empathy", ]
# make a df of cluster 33
cluster33 <- subset(kw_with_cluster, subset=kmeans100 == 33)
View(cluster33)
## Apply cluster analysis within a cluster ##
# create new subset data frame
embedding_cluster33 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster33$word)
View(cost_df)
# fit k-means
k_means_fit_cluster33 <- kmeans(embedding_cluster33, 3, iter.max = 30)
# look at the results
# obtain the centroids
k_means_fit_cluster33$centers
# look at the size of the clusters
k_means_fit_cluster33$size
# Create data frame in which the merge cluster assignment back to rows/word.
token_within_clusters <- as.data.frame(cbind(row.names(embedding_cluster33), k_means_fit_cluster33$cluster))
# add column names
names(token_within_clusters) <- c("word", "kmeans100")
View(token_within_clusters)
# add column names
names(token_within_clusters) <- c("word", "kmeans3")
# make a df for the first 5 cluster results, quickly "eyeball" results
cluster33_1 <- subset(token_within_clusters, subset=kmeans3 == 1)
cluster33_2 <- subset(kw_with_cluster, subset=kmeans3 == 2)
cluster33_2 <- subset(token_within_clusters, subset=kmeans3 == 2)
cluster33_3 <- subset(token_within_clusters, subset=kmeans3 == 3)
View(cluster33_1)
View(cluster33_2)
View(cluster33_3)
View(df_incllemma)
View(lemma_embedding)
# -> only the words depressed, depression, depressive are in this cluster. Might be that these are the only depression words in the embedding need to check this. -> If I look at the lemma_embedding dataframe and type depre in the filter within the word column I get the following words: nondepressed, antidepressant depressed, depression, depressive. It makes sense that the other two words concerning depression can belong to a different cluster(s).
kw_with_cluster[kw_with_cluster$word == "nondepressed", ]
kw_with_cluster[kw_with_cluster$word == "antidepressant", ]
## Selecting ‘k’ Using ‘Elbow Method’ ##
# accumulator for cost results
cost_df <- data.frame()
# run kmeans for all clusters up to 100
for(i in 1:100){
# Run kmeans for each level of i, allowing up to 100 iterations for convergence
kmeans<- kmeans(x=glove_embedding, centers=i, iter.max=100)
# Combine cluster number and cost together, write to df
cost_df<- rbind(cost_df, cbind(i, kmeans$tot.withinss))
}
# create the elbow plot
#Calculate lm's for emphasis
lm(cost_df$cost[1:10] ~ cost_df$cluster[1:10])
names(cost_df) <- c("cluster", "cost")
# create the elbow plot
#Calculate lm's for emphasis
lm(cost_df$cost[1:10] ~ cost_df$cluster[1:10])
lm(cost_df$cost[10:19] ~ cost_df$cluster[10:19])
lm(cost_df$cost[20:100] ~ cost_df$cluster[20:100])
cost_df$fitted <- ifelse(cost_df$cluster <10, (19019.9 - 550.9*cost_df$cluster),
ifelse(cost_df$cluster <20, (15251.5 - 116.5*cost_df$cluster),
(13246.1 - 35.9*cost_df$cluster)))
#Cost plot
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=200, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
# create the elbow plot
#Calculate lm's for emphasis
lm(cost_df$cost[1:10] ~ cost_df$cluster[1:10])
lm(cost_df$cost[10:19] ~ cost_df$cluster[10:19])
lm(cost_df$cost[20:100] ~ cost_df$cluster[20:100])
cost_df$fitted <- ifelse(cost_df$cluster <10, (489521  - 7126*cost_df$cluster),
ifelse(cost_df$cluster <20, ( 443476 - 1610*cost_df$cluster),
(415803.5 - 497.2  *cost_df$cluster)))
#Cost plot
ggplot(data=cost_df, aes(x=cluster, y=cost, group=1)) +
theme_bw(base_family="Garamond") +
geom_line(colour = "darkgreen") +
theme(text = element_text(size=20)) +
ggtitle("Reduction In Cost For Values of 'k'\n") +
xlab("\nClusters") +
ylab("Within-Cluster Sum of Squares\n") +
scale_x_continuous(breaks=seq(from=0, to=200, by= 10)) +
geom_line(aes(y= fitted), linetype=2)
install.packages("factoextra")
# Determine the value of K
library(factoextra)
fviz_nbclust(embedding_cluster33, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
View(find_similar_words)
View(wssplot)
fviz_nbclust(embedding_cluster33, kmeans(), method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
?kmeans()
fviz_cluster(k_means_fit_cluster33, data = embedding_cluster33,
palette = c("#2E9FDF", "#00AFBB", "#E7B800", "#FC4E07"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
?fviz_nbclust(df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
?fviz_nbclust()
fviz_nbclust(embedding_cluster33, kmeans(), method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(x = embedding_cluster33, kmeans(), method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
df <- as.data.frame(embedding_cluster33)
fviz_nbclust(x = df, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
fviz_nbclust(x = df, kmeans(), method = "wss") +
geom_vline(xintercept = 4, linetype = 2)
nclust <- fviz_nbclust(x = df, kmeans(), method = "wss")
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100, iter.max = 30, nstart = 25)
# Create data frame in which the merge cluster assignment back to rows/word.
kw_with_cluster <- as.data.frame(cbind(row.names(glove_embedding), k_means_fit$cluster))
# add column names
names(kw_with_cluster) <- c("word", "kmeans100")
# Mother
# find out in which cluster the word mother is assigned
kw_with_cluster[kw_with_cluster$word == "mother", ]
cluster29 <- subset(kw_with_cluster, subset=kmeans100 == 29)
View(cluster29)
# fit the k-means clustering with 100 clusters
k_means_fit <- kmeans(glove_embedding, 100, iter.max = 30)
# try to make a plot
clusplot(glove_embedding,
kc$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 0)
# try to make a plot
clusplot(glove_embedding,
k_means_fit$cluster,
color = TRUE,
shade = TRUE,
labels = 2,
lines = 0)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i, iter.max = 30)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i, iter.max = 30)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
setwd("~/Documents/Research_Assistant_Rgit/veni_sysrev/amy")
# load libraries
library(dplyr)
library(cluster)
library(ggplot2)
library(devtools)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
set.seed(88)
# load existing word embeddings
# load glove vectors into R
vectors_glove <- data.table::fread('glove.840B.300d.txt', data.table = F,  encoding = 'UTF-8', quote="")
# rename the columns
colnames(vectors_glove) <- c('word',paste('dim',1:300,sep = '_'))
# load data frame with column with selection of words to include in analysis. For now I will only
df_incllemma <- readRDS("include_lemma.RData")
# create df in which only the words that we want to be included are kept
lemma_embedding <- subset(vectors_glove, word %in% df_incllemma$include_lemma)
# check number of unique words
length(unique((lemma_embedding$word)))
# non-GloVe: check which words are in the included filter but are not in the feature matrix and are therefore lost (unwanted).
lost_lemma <- subset(df_incllemma, !(include_lemma %in% lemma_embedding $word))
# convert first column, word, to row index
library(tidyverse)
glove_embedding <- lemma_embedding %>%
remove_rownames() %>%
column_to_rownames(var = 'word')
# convert dataframe to a matrix
glove_embedding <- as.matrix(glove_embedding)
str(glove_embedding)
##  Determine the value of K
library(factoextra)
# try to determine number of cluster with NbClust package
library(NbClust)
# Another pacakge for determine number of clusters
library(ClusterR)
# Silhouette method
fviz_nbclust(glove_embedding, kmeans, method = "silhouette", k.max = 150) +
labs(subtitle = "Silhouette method")
?xlim()
# Silhouette method
silplot <- fviz_nbclust(glove_embedding, kmeans, method = "silhouette", k.max = 150) +
labs(subtitle = "Silhouette method")
warnimng()
warning()
silplot +
xlim(0,200)
silplot
# Elbow method
fviz_nbclust(glove_embedding, kmeans, method = "wss") + labs(subtitle = "Elbow method") # add subtitle
# try to determine number of cluster with NbClust package
library(NbClust)
nbclust_out <- NbClust(
data = embedding_cluster33,
distance = "euclidean",
min.nc = 2, # minimum number of clusters
max.nc = 200, # maximum number of clusters
method = "kmeans", # one of: "ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid", "kmeans"
index = "silhouette"
)
nbclust_out <- NbClust(
data = glove_embedding,
distance = "euclidean",
min.nc = 2, # minimum number of clusters
max.nc = 200, # maximum number of clusters
method = "kmeans", # one of: "ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median", "centroid", "kmeans"
index = "silhouette"
)
warnings()
?NbClust()
# Elbow method
fviz_nbclust(glove_embedding, kmeans, method = "wss", k.max = 150) + labs(subtitle = "Elbow method") # add subtitle
warnings()
?fviz_nbclust
worcs::git_update()
