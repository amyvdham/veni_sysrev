df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- data.table(word = tolower(unlist(df)), doc = rep(1:length(df), times = sapply(df, length)))
df <- df[!exclude_these, ]
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- data.table(word = tolower(unlist(df)), doc = rep(1:length(df), times = sapply(df, length)))
table(grep("disease", df$word, value = T))
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
df[!is.na(res_cat$words), word := res_cat$words[!is.na(res_cat$words)]]
df[, id := paste0(word, doc)]
df <- df[!duplicated(id), ]
df[, id := NULL]
head(df)
head(res_cat$words)
tail(res_cat$words)
tail(df)
library(lattice)
# What are these texts about?
library(topicmodels)
library(udpipe)
library(slam)
nounbydoc <- df[, list(freq = .N), by = list(document = doc, term = word)]
nounbydoc
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc)) # document_frequency_matrix(x)
topterms <- col_sums(dtm)
topterms <- sort(topterms, decreasing = TRUE)
hist(topterms, breaks = 100)
tt <- table(topterms)
plot(1:10, tt[1:10], type = "l")
tt
topterms
.001*nrow(recs)
.01*nrow(recs)
topterms <- topterms[topterms > .01*nrow(recs)]
topterms
topterms <- topterms[topterms > .005*nrow(recs)]
topterms
topterms <- col_sums(dtm)
topterms <- sort(topterms, decreasing = TRUE)
hist(topterms, breaks = 100)
tt <- table(topterms)
plot(1:10, tt[1:10], type = "l")
topterms <- topterms[topterms > .005*nrow(recs)]
topterms
topterms <- head(topterms, 250)
topterms <- names(topterms)
dtm_top <- dtm[, topterms]
dtm_top <- dtm_top[row_sums(dtm_top) > 0, ]
set.seed(43892)
topics <- LDA(x = dtm_top, k = 5, method = "VEM", control = list(alpha = 0.1, estimate.alpha = TRUE, seed = as.integer(10:1), verbose = FALSE, nstart = 10, save = 0, best = TRUE))
# What topics are there?
topic_terms <- predict(topics, type = "terms", min_posterior = 0.01)
topic_terms
scores <- predict(topics, newdata = dtm[, topterms], type = "topics")
# How many articles about each topic?
table(scores$topic)
scores
word_freq <- df[, list(n = .N), by = list(word)]
word_freq <- word_freq[order(word_freq$n, decreasing = TRUE), ]
word_freq <- as.data.frame(word_freq)
library(wordcloud)
wordcloud(words = word_freq$word, freq = word_freq$n, max.words = 150, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
library(ggraph)
library(ggforce)
library(igraph)
library(tidytext)
#word_cooccurences <- pair_count(df_nouns, group="article.id", value="word.lemma", sort = TRUE)
create_cooc <- function(dtm){
dtm_binary <- dtm > 0
Matrix::t(dtm_binary) %*% dtm
}
#dtm <- document_term_frequencies(x = df_co, document = "doc", term = "word")
#dtm <- document_term_matrix(dtm)
cooc <- create_cooc(dtm_top)
word_cooccurences <- as_cooccurrence(cooc)
word_cooccurences <- word_cooccurences[!word_cooccurences$term1 == word_cooccurences$term2, ]
word_cooccurences <- word_cooccurences[order(word_cooccurences$cooc, decreasing = TRUE), ]
plot(1:length(word_cooccurences$cooc), word_cooccurences$cooc)
df_plot <- word_cooccurences[word_cooccurences$cooc > .01*nrow(recs), ]
df_plot
df_plot$id <- apply(df_plot[, c("term1", "term2")], 1, function(x)paste0(sort(x), collapse = ""))
df_plot <- df_plot[!duplicated(df_plot$id), c("term1", "term2", "cooc")]
set.seed(123456789)
df_plot %>%
graph_from_data_frame() %>%
ggraph(layout = "circle") +
geom_edge_link(mapping = aes(edge_colour = cooc, edge_width = cooc)) +
#geom_node_text(color = "lightblue", size = 5) +
geom_node_label(aes(label = name), col = "darkgreen") +
ggtitle(sprintf("\n%s", "CETA treaty\nCo-occurrence of nouns")) +
theme_void()
library(Matrix)
library(qgraph)
terms <- predict(ceta_topics, type = "terms", min_posterior = 0.025)
terms <- predict(topics, type = "terms", min_posterior = 0.025)
terms
terms <- predict(topics, type = "terms", min_posterior = 0.08)
terms
terms <- unique(unlist(sapply(terms, names)))
out <- dtm_top
out <- cor(as.matrix(out))
out <- nearPD(x=out, corr = TRUE)$mat
out <- as.matrix(out)
cor_mat <- dtm_cor(dtm_top)
m <- EBICglasso(cor_mat, n = 429, threshold = TRUE, returnAllResults = T)
m$optnet
tmp <- as.data.frame.table(m)
tmp[!tmp$Freq == 0, ]
tmp <- as.data.frame.table(m)
m
m$optnet
tmp <- as.data.frame.table(m$optnet)
tmp
tmp[!tmp$Freq == 0, ]
qgraph(m, layout="spring", labels = colnames(out), label.scale=FALSE,
label.cex=1, node.width=.5)
qgraph(tmp, layout="spring", labels = colnames(out), label.scale=FALSE,
label.cex=1, node.width=.5)
bibliometrix::biblioNetwork(df, analysis = "co-occurrences", network = "")
bibliometrix::biblioNetwork(df, analysis = "co-occurrences", network = "")
bibliometrix::biblioNetwork(recs, analysis = "co-occurrences", network = "")
bibliometrix::biblioNetwork(recs, analysis = "co-occurrences", network = "author_keywords")
tmp <- cocMatrix(df, Field = "ID")
tmp <- cocMatrix(recs, Field = "DE")
tmp %>%
as_cooccurrence() %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(mapping = aes(edge_colour = cooc)) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8, col = "darkgreen") +
ggtitle(sprintf("\n%s", "CETA treaty\nCo-occurrence of nouns")) +
theme_void()
doInstall <- F  # Change to FALSE if you don't want packages installed.
toInstall <- c("sna", "ggplot2", "Hmisc", "reshape2")
if(doInstall){install.packages(toInstall, repos = "http://cran.r-project.org")}
lapply(toInstall, library, character.only = TRUE)
# Empty ggplot2 theme
new_theme_empty <- theme_bw()
new_theme_empty$line <- element_blank()
new_theme_empty$rect <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines",
valid.unit = 3L, class = "unit")
data(coleman)  # Load a high school friendship network
adjacencyMatrix <- coleman[1, , ]  # Fall semester
layoutCoordinates <- gplot(adjacencyMatrix)  # Get graph layout coordinates
adjacencyList <- melt(adjacencyMatrix)  # Convert to list of ties only
adjacencyList <- adjacencyList[adjacencyList$value > 0, ]
head(adjacencyList)
# Function to generate paths between each connected node
edgeMaker <- function(whichRow, len = 100, curved = TRUE){
fromC <- layoutCoordinates[adjacencyList[whichRow, 1], ]  # Origin
toC <- layoutCoordinates[adjacencyList[whichRow, 2], ]  # Terminus
# Add curve:
graphCenter <- colMeans(layoutCoordinates)  # Center of the overall graph
bezierMid <- c(fromC[1], toC[2])  # A midpoint, for bended edges
distance1 <- sum((graphCenter - bezierMid)^2)
if(distance1 < sum((graphCenter - c(toC[1], fromC[2]))^2)){
bezierMid <- c(toC[1], fromC[2])
}  # To select the best Bezier midpoint
bezierMid <- (fromC + toC + bezierMid) / 3  # Moderate the Bezier midpoint
if(curved == FALSE){bezierMid <- (fromC + toC) / 2}  # Remove the curve
edge <- data.frame(bezier(c(fromC[1], bezierMid[1], toC[1]),  # Generate
c(fromC[2], bezierMid[2], toC[2]),  # X & y
evaluation = len))  # Bezier path coordinates
edge$Sequence <- 1:len  # For size and colour weighting in plot
edge$Group <- paste(adjacencyList[whichRow, 1:2], collapse = ">")
return(edge)
}
adjacencyList <- data.frame(Var1 = c(1, 1), Var2 = c(2, 3), value = c(1, 5))
# Generate a (curved) edge path for each pair of connected nodes
allEdges <- lapply(1:nrow(adjacencyList), edgeMaker, len = 500, curved = TRUE)
allEdges <- do.call(rbind, allEdges)  # a fine-grained path ^, with bend ^
head(layoutCoordinates)
layoutCoordinates <- matrix(c(1, 1, 3, -1, 2, -2), ncol = 2, dimnames = list(NULL, c("x", "y")))
zp1 <- ggplot(allEdges)  # Pretty simple plot code
zp1 <- zp1 + geom_path(aes(x = x, y = y, group = Group,  # Edges with gradient
colour = Sequence, size = -Sequence))  # and taper
zp1 <- zp1 + geom_point(data = data.frame(layoutCoordinates),  # Add nodes
aes(x = x, y = y), size = 2, pch = 21,
colour = "black", fill = "gray")  # Customize gradient v
zp1 <- zp1 + scale_colour_gradient(low = gray(0), high = gray(9/10), guide = "none")
zp1 <- zp1 + scale_size(range = c(1/10, 1), guide = "none")  # Customize taper
zp1
zp1 <- zp1 + new_theme_empty  # Clean up plot
library(bibliometrix)
library(dplyr)
library(igraph)
library(ggraph)
results <- biblioAnalysis(recs, sep = ";")
S <- summary(object = results, k = 10, pause = FALSE)
plot(S$AnnualProduction)
plot(S$AnnualGrowthRate)
S$AnnualGrowthRate
S$MostProdAuthors
S$MostProdCountries
plot(x = results, k = 10, pause = FALSE)
NetMatrix <- biblioNetwork(recs, analysis = "collaboration", network = "authors")
range(NetMatrix)
tmp <- NetMatrix
max_collab <- vector(length = nrow(tmp))
for(i in 1:nrow(tmp)){
max_collab[i] <- max(tmp[i, -i], na.rm = TRUE)
}
tb <- table(max_collab)
plot(1:length(tb), tb, type = "b")
sum(max_collab > 5)
keep_these <- max_collab > 10
sum(keep_these)
tmp2 <- tmp[keep_these, keep_these]
colnames(tmp2) <- rownames(tmp2) <- gsub(" [A-Z]+?$", "", rownames(tmp2))
set.seed(36478)
authors <- networkPlot(tmp2, n = 93, type = "fruchterman", labelsize = 2, label.cex = TRUE, halo = TRUE, size = 6, size.cex = TRUE, weighted = TRUE, edgesize = 4)
head(authors$graph)
tmp2[1:5, 1:5]
tmp2 %>%
graph_from_adjacency_matrix() %>%
ggraph(layout = "fr") +
geom_edge_link() + #mapping = aes(edge_colour = cooc)
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1.8, col = "darkgreen") +
ggtitle(sprintf("\n%s", "CETA treaty\nCo-occurrence of nouns")) +
theme_void()
CS <- conceptualStructure(recs,field="DE", method="CA", minDegree=4, k.max=8, stemming=TRUE, labelsize=10, documents=10)
warnings()
names(CS)
CS <- conceptualStructure(M,field="ID", method="CA", minDegree=4, clust=5, stemming=FALSE, labelsize=10, documents=10)
CS2 <- conceptualStructure(recs,field="ID", method="CA", minDegree=4, clust=5, stemming=FALSE, labelsize=10, documents=10)
grep("reason", df$word)
grep("emo", df$word)
grep("abstr", df$word)
grep("abstr", df$word, value = T)
table(grep("self", df$word, value = T))
table(grep("autonomy", df$word, value = T))
table(grep("auton", df$word, value = T))
table(grep("self.?determin", df$word, value = T))
table(grep("auton", df$word, value = T))
table(grep("indep", df$word, value = T))
table(grep("audienc", df$word, value = T))
table(grep("self.?consciou", df$word, value = T))
table(grep("judg", df$word, value = T))
table(grep("expec", df$word, value = T))
table(grep("norm", df$word, value = T))
table(grep("understan", df$word, value = T))
table(grep("indep", df$word, value = T))
table(grep("achiev", df$word, value = T))
table(grep("intima", df$word, value = T))
table(grep("victim", df$word, value = T))
table(grep("(?<!shooting |sexual )victim", df$word, value = T, perl = T))
table(grep("expecta", df$word, value = T))
tmp <- read.table("clipboard", sep = "\t")[[1]]
tmp
tmp <- read.table("clipboard", sep = "\t")
tmp
gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
write.table(tmp, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t")
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[unique(tmp$V1), ]
tmp <- tmp[order(tmp$last, decreasing = TRUE), ]
tmp
tmp <- tmp[order(tmp$last), ]
tmp
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
tmp
write.table(tmp, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t")
tmp <- read.table("clipboard", sep = "\t")
tmp
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[unique(tmp$V1), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
tmp
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp
tmp[unique(tmp$V1), ]
tmp <- tmp[!duplicated(tmp$V1), ]
tmp
tmp <- tmp[order(tmp$last), ]
tmp
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t")
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[!duplicated(tmp$V1), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[!duplicated(tmp$V1), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[!duplicated(tmp$V1), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp <- tmp[!duplicated(tmp$V1), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
gert::git_config_global()
tmp <- gert::git_config_global()
View(tmp)
gert::git_config_global_set(name = "user.name", value = "test")
tmp <- gert::git_config_global()
gert::git_config_global_set(name = "user.name", value = "cjvanlissa")
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
gsub("[\\. ]", "", tolower(tmp$V1))
gsub("[\\. ,]", "", tolower(tmp$V1))
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp
tmp <- tmp[order(tmp$last), ]
tmp
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", tmp$V1)
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp$sort <- gsub(",.+?$", "", tmp$last)
tmp
tmp$sort
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)($|,.+)", "\\1", tmp$V1)
tmp$last
gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub(",.+?$", "", tmp$V1))
gsub(",.+?$", "", tmp$V1)
gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub("[, ]+?(MSc|msc|MSC|MA)", "", tmp$V1))
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub("[, ]+?(MSc|msc|MSC|MA)", "", tmp$V1))
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub("[, ]+?(MSc|msc|MSC|MA)", "", tmp$V1))
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub("[, ]+?(MSc|msc|MSC|MA)", "", tmp$V1))
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
tmp <- read.table("clipboard", sep = "\t")
tmp$last <- gsub("^.+(\\b[a-zA-Z-]+)$", "\\1", gsub("[, ]+?(MSc|msc|MSC|MA)", "", tmp$V1))
tmp$screen <- gsub("[\\. ,]", "", tolower(tmp$V1))
tmp <- tmp[!duplicated(tmp$screen), ]
tmp <- tmp[order(tmp$last), ]
tmp$V1 <- gsub("Dr\\.", "dr\\.", tmp$V1)
write.table(tmp$V1, "clipboard", row.names = FALSE, col.names = FALSE, sep = "\t", quote = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidySEM)
tidySEM::graph(edges = data.frame(), nodes = data.frame(id = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"))
tidySEM::graph(edges = data.frame(), nodes = data.frame(id = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
tidySEM::graph(edges = data.frame(from = c(), to = c()), nodes = data.frame(id = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
data.frame(from = c(), to = c()
)
data.frame(from = c(), to = c(), drop = FALSE)
data.frame(from = c(), to = c())
tidySEM::graph(edges = data.frame(from = c(NA), to = c(NA)), nodes = data.frame(id = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
tidySEM::graph(edges = data.frame(from = c("x"), to = c("x"), connect.from = "left", connect.to = "right"), nodes = data.frame(id = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
tidySEM::graph(edges = data.frame(from = c("x"), to = c("x"), connect.from = "left", connect.to = "right"), nodes = data.frame(name = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
library(ggplot2)
ggplot(data.frame(x= c(-1,1,1,-1), y = c(.5, .5, -.5, -.5)), aes ) + geom_path()
ggplot(data.frame(x= c(-1,1,1,-1), y = c(.5, .5, -.5, -.5)), aes(x =x , y= y)) + geom_path()
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path()
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed()
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void()
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void() + geom_label(data.frame(x=0,y=0, text = "Observed\n(measured)\nvariable"), aes(label = text))
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void() + geom_label(data = data.frame(x=0,y=0, text = "Observed\n(measured)\nvariable"), aes(label = text))
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void() + geom_label(data = data.frame(x=0,y=0, text = "Observed\n(measured)\nvariable"), aes(label = text))
tidySEM::graph(edges = data.frame(from = c("x"), to = c("x"), connect.from = "left", connect.to = "right"), nodes = data.frame(name = "x", label = "Observed\n(measured)\nvariable", shape = "rectangle"), layout = matrix("x"))
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void() + geom_label(data = data.frame(x=0,y=0, text = "Observed\n(measured)\nvariable"), aes(label = text))
ggplot(data.frame(x= c(-1,1,1,-1, -1), y = c(.5, .5, -.5, -.5, .5)), aes(x =x , y= y)) + geom_path() + coord_fixed() + theme_void() + geom_text(data = data.frame(x=0,y=0, text = "Observed\n(measured)\nvariable"), aes(label = text))
tidySEM:::.oval_node(ggplot2(NULL), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL, fill = "white"), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL, aes(fill = "white")), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80, fill = "white"))
tidySEM:::.oval_node(ggplot(NULL), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80, fill = "white")
tidySEM:::.oval_node(ggplot(NULL, fill = "white"), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)+geom_polygon(fill = "white")
tidySEM:::.oval_node(ggplot(NULL)+geom_polygon(fill = "white"), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
tidySEM:::.oval_node(ggplot(NULL)+geom_polygon(fill = "white", colour = "white"), data.frame(x = 0, y = 0), oval_width = 2, oval_height = 1, npoints = 80)
install.packages("cjvanlissa/worcs")
renv::restore()
c(.45,.67)^2
sum(c(.45,.67)^2)
string <- "Optional reference: @@reference2020
```{r}
myiris <- read.csv('iris.csv')
```
"
worcs:::cat(cleancitations(string))
string <- "Optional reference: @@reference2020
```{r}
myiris <- read.csv('iris.csv')
```
"
worcs:::cleancitations(string)
library(data.table)
library(bibliometrix)
install.packages("bibliometrix")
source("word_functions.R")
exclude_terms <- readLines("exclude_terms.txt")
dict_synon <- dget("dictionary_synonyms.txt")
recs <- readRDS("recs_6653.RData")
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- data.table(word = tolower(unlist(df)), doc = rep(1:length(df), times = sapply(df, length)))
table(grep("disease", df$word, value = T))
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
res_cat <- cat_words(df$word, dict_synon)
head(res_cat$unmatched)
res_cat$dup
res_cat <- cat_words(df$word, dict_synon)
df[, word := res_cat$words]
df[, id := paste0(word, doc)]
df <- df[!duplicated(id), ]
df[, id := NULL]
library(lattice)
# What are these texts about?
library(topicmodels)
library(udpipe)
library(slam)
install.packages("topicmodels", dependencies = TRUE)
library(lattice)
# What are these texts about?
library(topicmodels)
library(udpipe)
library(slam)
install.packages("modeltools", dependencies = TRUE)
library(lattice)
# What are these texts about?
library(topicmodels)
library(udpipe)
library(slam)
install.packages("udpip3", dependencies = TRUE)
install.packages("udpipe", dependencies = TRUE)
install.packages("slam", dependencies = TRUE)
library(lattice)
# What are these texts about?
library(topicmodels)
library(udpipe)
library(slam)
nounbydoc <- df[, list(freq = .N), by = list(document = doc, term = word)]
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc)) # document_frequency_matrix(x)
topterms <- col_sums(dtm)
topterms <- sort(topterms, decreasing = TRUE)
hist(topterms, breaks = 100)
tt <- table(topterms)
plot(1:10, tt[1:10], type = "l")
topterms <- topterms[topterms > .005*nrow(recs)]
topterms <- head(topterms, 250)
topterms <- names(topterms)
topterms
dtm_top <- dtm[, topterms]
dtm_top <- dtm_top[row_sums(dtm_top) > 0, ]
set.seed(43892)
topics <- LDA(x = dtm_top, k = 5, method = "VEM", control = list(alpha = 0.1, estimate.alpha = TRUE, seed = as.integer(10:1), verbose = FALSE, nstart = 10, save = 0, best = TRUE))
# What topics are there?
topic_terms <- predict(topics, type = "terms", min_posterior = 0.01)
topic_terms
scores <- predict(topics, newdata = dtm[, topterms], type = "topics")
# How many articles about each topic?
table(scores$topic)
word_freq <- df[, list(n = .N), by = list(word)]
word_freq <- word_freq[order(word_freq$n, decreasing = TRUE), ]
word_freq <- as.data.frame(word_freq)
## Visualise them with wordclouds
library(wordcloud)
wordcloud(words = word_freq$word, freq = word_freq$n, max.words = 150, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
install.packages("RColorBrewer")
library(wordcloud)
wordcloud(words = word_freq$word, freq = word_freq$n, max.words = 150, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
install.packages("wordcloud")
library(wordcloud)
wordcloud(words = word_freq$word, freq = word_freq$n, max.words = 150, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
library(ggraph)
library(ggforce)
library(igraph)
library(tidytext)
install.package("tidytext")
install.packages("tidytext")
library(remotes)
install_github("juliasilge/tidytext")
install_github("juliasilge/tidytext")
install_github("juliasilge/tidytext", upgrade = "never")
