legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
})
eval(p)
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
})
eval(p)
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("tmnetworks.svg", width = 14)
eval(p)
dev.off()
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 400)
eval(p)
dev.off()
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 600)
eval(p)
dev.off()
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
})
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 600)
eval(p)
dev.off()
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(s1g, edge.curved = 0,
layout=s1l,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.2, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(s2g, edge.curved = 0,
layout=s2l,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
})
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 600)
eval(p)
dev.off()
png("tmnetworks.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
library("papaja")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(knitr)
library(kableExtra)
library(cowplot)
run_everything <- FALSE
notingraph <- list()
keyw <- function(x){
x
}
recs <- data.table(read.csv("recs_final.csv"))
library("papaja")
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(knitr)
library(kableExtra)
library(cowplot)
run_everything <- TRUE
notingraph <- list()
keyw <- function(x){
x
}
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed, echo = FALSE, message = FALSE, warning = FALSE, results="hide")
library(data.table)
library(stringr)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
dict <- read_yaml("yaml_dict.txt")
bl_theory <- readLines("baseline_theory.txt")
bl_review <- readLines("baseline_reviews.txt")
df <- data.frame(word = trimws(tolower(bl_theory)), source = "theory")
df <- rbind(df, data.frame(word = trimws(tolower(bl_review)), source = "reviews"))
# Categorize words
res_cat <- cat_words(df$word, dict, handle_dups = "all")
df$cat <- res_cat$words
df <- df[!duplicated(df$cat), ]
if(!is.null(res_cat[["unmatched"]])){
df <- df[!df$cat %in% names(res_cat$unmatched), ]
}
baseline_cat <- df
baseline <- c("dysregulation", unique(df$cat[df$source == "theory"]))
saveRDS(baseline, "baseline.RData")
saveRDS(baseline_cat, "baseline_cat.RData")
in_theory <- df$word[df$source == "theory"]
in_rev <- df$word[!df$source == "theory"]
in_rev[!in_rev %in% in_theory]
df_plot <- data.frame(term1 = df$cat[df$source == "theory"], term2 = "dysregulation")
df_plot <- df_plot[!df_plot$term1 == df_plot$term2, ]
edg <- df_plot
edg$width = 1
vert <- data.frame(name = unique(c(df_plot$term1, df_plot$term2)), label = pretty_words(unique(c(df_plot$term1, df_plot$term2))), size = 1)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g1 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
# Plot 2 ------------------------------------------------------------------
df_plot <- data.frame(term1 = df$cat, term2 = "dysregulation", source = df$source)
edg <- df_plot
edg$width = 1
vert <- data.frame(name = unique(c(df_plot$term1, df_plot$term2)), label = pretty_words(unique(c(df_plot$term1, df_plot$term2))), size = 1)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
vert$faded <- vert$name %in% df$cat[df$source == "theory"]
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$color[vert$faded] <- "#FFFFFF"
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g2 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
set.seed(4) #4 #2 #3
l1 <- l <- layout_with_fr(g1)
set.seed(3)
l2 <- layout_with_fr(g2)
p <- quote({
# Set margins to 0
par(mar=c(0.5,0.5,0.5,0.5),
mfrow=c(1,2))
plot(g1, edge.curved = 0, layout=l1,
vertex.label.family = "sans",
vertex.label.cex = 0.7,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "A")
legend(x=-1.2, y=1.1, names(cat_cols), pch=21, col=cat_cols, pt.bg=cat_cols, pt.cex=1.6, cex=.7, bty="n", ncol=1)
plot(g2, edge.curved = 0, layout=l2,
vertex.label.family = "sans",
vertex.label.cex = 0.7,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
text(-1.1, y = -1, labels = "B")
})
saveRDS(g1, "bl_g1.RData")
saveRDS(g2, "bl_g2.RData")
saveRDS(l1, "bl_l1.RData")
saveRDS(l2, "bl_l2.RData")
# Save files
png("baseline_network.png", height = 100, width = 200, units = "mm", res= 300)
eval(p)
dev.off()
svg("baseline_network.svg", width = 14)
eval(p)
dev.off()
knitr::include_graphics("baseline_network.png")
filenam <- "recs_6653.RData"
if(!file.exists(filenam)){
library(bibliometrix)
f <- list.files("./recs/18-3-2020/", full.names = TRUE)
f <- readFiles(f)
recs <- convert2df(f)
saveRDS(recs, filenam)
} else {
recs <- readRDS(filenam)
}
filenam <- "unique_recs.RData"
if(!file.exists(filenam)){
library(revtools)
recs$doi <- recs$DI
recs$doi[is.na(recs$doi)] <- paste0("fake", 1:sum(is.na(recs$doi)))
if(any(duplicated(recs$doi))){
recs$doi[duplicated(recs$doi)|duplicated(recs$doi, fromLast = T)]
dup_doi <- duplicated(recs$doi)
recs <- recs[!dup_doi, ]
}
recs$title <- recs$TI
# locate and extract unique references
potential_dups <- find_duplicates(recs, match_variable = "title", match_function = "stringdist", threshold = 5, to_lower = TRUE, remove_punctuation = TRUE)
unique_recs <- extract_unique_references(recs, matches = potential_dups)
saveRDS(unique_recs, filenam)
write.csv(data.frame(dup_doi = sum(dup_doi), dup_title = (nrow(recs)-nrow(unique_recs))-sum(dup_doi)), "dups.csv", row.names = FALSE)
} else {
unique_recs <- readRDS(filenam)
dups <- read.csv("dups.csv")
}
unique_recs$id_num <- 1:nrow(unique_recs)
if(FALSE){
# df_screen <- unique_recs[, c("id_num", "TI", "AB")]
# names(df_screen) <- c("id_num", "title", "abstract")
# write.csv(df_screen, file = "asreview.csv", row.names = FALSE, fileEncoding = "UTF-8")
df_screen <- unique_recs[, c("id_num", "TI", "AU", "SO", "SN", "VL", "IS", "BP", "PY", "PU", "DI", "AB")]
names(df_screen) <- c("key", "title", "authors", "journal", "issn", "volume", "issue", "pages", "year", "publisher", "url", "abstract")
write.csv(df_screen, file = "rayyan.csv", row.names = FALSE)
}
rayyan_res <- read.csv("rayyan_exports/articles.csv")
rayyan_dups <- nrow(unique_recs) - nrow(rayyan_res)
screen <- read.csv("asreview_result_sysrevemotprob.csv")
screen <- screen[screen$key %in% rayyan_res$key, ]
screen$drop_these <- FALSE
screen$drop_these[which(screen$included == 1 | screen$rayyan == "False")] <- TRUE
if(!file.exists("recs_final.csv")){
recs_final <- unique_recs[screen$key[!screen$drop_these], ]
write.csv(recs_final, "recs_final.csv", row.names = FALSE)
} else {
recs_final <- read.csv("recs_final.csv")
}
library(stringr)
library(udpipe)
library(igraph)
library(wordcloud)
library(Matrix)
library(ggplot2)
library(yaml)
source("word_functions.R")
source("circle2.R")
#run_everything = FALSE
study1details <- read_yaml("study1_details.yml")
dict <- read_yaml("yaml_dict.txt")
recs <- data.table(read.csv("recs_final.csv"))
if(!is.data.table(recs)){
browser()
}
recs[, "doc" := 1:nrow(recs)]
study1details <- list(dim_recs = dim(recs))
df <- lapply(recs$DE, function(x){strsplit(x, split = "; ")[[1]]})
df <- merge_df(recs, df, "word")
df[, word := tolower(word)]
df <- na.omit(df, cols = "word")
number_docs_words <- c(docs = length(unique(df$doc)), words = length(unique(df$word)))
yaml::write_yaml(number_docs_words, "study1_number_docs_words.txt")
# Exclude words
exclude_terms <- readLines("exclude_terms.txt")
exclude_these <- unique(unlist(lapply(exclude_terms, grep, x = df$word)))
df <- df[!exclude_these, ]
# Categorize words
res_cat <- cat_words(df$word, dict, handle_dups = "all")
# Check coding issues
#res_cat$dup
#head(res_cat$unmatched)
df <- merge_df(df, res_cat$words, "word_coded")
saveRDS(df, "study1_df.RData")
# Frequency of word by doc
nounbydoc <- df[, list(freq = .N), by = list(doc_id = doc, term = word_coded)]
# Set frequency to 1; we're not interpreting word frequency, only occurrence
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
term_freq <- table(colSums(dtm))
# Continue plotting word frequency ----------------------------------------
set.seed(5348)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
term_freqtop <- table(colSums(dtm_top))
term_freq <- as.data.frame.table(term_freq)
term_freq$pruned <- term_freq$Var1 %in% names(term_freqtop)
write_yaml(term_freq, "study1_term_freq_dist.yml")
write_yaml(dim(dtm_top), "study1_dtm_top.yml")
topterms <- colSums(dtm_top)
baseline <- readRDS("baseline.RData")
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
write.csv(word_freq, "study1_word_freq.csv", row.names = FALSE)
df_plot <- word_freq
df_plot <- df_plot[order(df_plot$Frequency, decreasing = TRUE), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
df_plot$cat <- categ$category[match(df_plot$Word, categ$name)]
df_plot$baseline <- as.character(df_plot$Word %in% baseline)
df_plot$faded <- df_plot$Word %in% baseline
# Tag words that are not in the cooccurrence graph
in_graph <- row.names(read.csv("s1_cooc.csv", row.names = 1))
notingraph <- !df_plot$Word %in% in_graph
df_plot$notingraph <- notingraph
italic_labels <- as.character(df_plot$Word)
italic_labels[notingraph] <- sapply(italic_labels[notingraph], function(x){
parse(text = paste0("italic('", x, "')"))
})
# Prettify words
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
df_plot$cat <- ordered(df_plot$cat, levels = c("Outcome", "Indicator", "Cause", "Protective"))
write_yaml(df_plot$Word, "s1_words.yml")
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat), fill = "white", shape = 21, size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat), shape = 21, size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
saveRDS(p, "s1_varimp.RData")
svg("s1_varimp.svg", width = 7/2.54, height = 14/2.54)
eval(p)
dev.off()
ggsave("s1_varimp.png", p, device = "png", width = 7, height = 14, units = "cm")
p1 <- p + theme(legend.position = "none")
df_plot$Frequency <- sqrt(df_plot$Frequency)
## Visualise them with wordclouds
p <- quote({
set.seed(46)
wordcloud(words = df_plot$Word, freq = df_plot$Frequency, scale = c(2,.4), max.words = 150, rot.per = 0,  random.order = FALSE, colors = brewer.pal(8, "Dark2"))
})
svg("study1_wordcloud.svg")
eval(p)
dev.off()
png("study1_wordcloud.png")
eval(p)
dev.off()
# Co-occurrence -----------------------------------------------------------
set.seed(52)
cooc <- create_cooc(dtm_top)
tmp <- cooc > 0
total_cooc <- sum(tmp[lower.tri(tmp)])
cooc <- select_cooc(create_cooc(dtm_top), q = .975)
tmp <- cooc > 0
total_cooc <- c(total_cooc, sum(tmp[lower.tri(tmp)]))
write.csv(as.matrix(cooc), "s1_cooc.csv")
df_plot <- as_cooccurrence(cooc)
df_plot <- df_plot[!df_plot$term1 == df_plot$term2, ]
df_plot <- df_plot[order(df_plot$cooc, decreasing = TRUE), ]
df_plot$id <- apply(df_plot[, c("term1", "term2")], 1, function(x)paste0(sort(x), collapse = ""))
df_plot <- df_plot[!duplicated(df_plot$id), ]
# Write study details -----------------------------------------------------
write_yaml(study1details, "study1_details.yml")
# Create network ----------------------------------------------------------
edg <- df_plot
edg$width = edg$cooc
vert <- data.frame(name = names(topterms), label = pretty_words(names(topterms)), size = topterms)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
vert$faded <- vert$name %in% baseline
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$color[vert$faded] <- "#FFFFFF"
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
# edge thickness
E(g)$width <- scales::rescale(sqrt(E(g)$width), to = c(2, 8))
dysreg_vertex = which(names(V(g)) == "dysregulation")
edge.start <- ends(g, es=E(g), names = FALSE)[,1]
edge.end <- ends(g, es=E(g), names = FALSE)[,2]
E(g)$lty <- c(1, 5)[(!(edge.start == dysreg_vertex|edge.end == dysreg_vertex))+1]
# Layout
set.seed(6) #4
l1 <- l <- layout_with_fr(g)
l1[,1] <- -1*l1[,1]
set.seed(64)
l2 <- layout_in_circle(g, order = shifter(V(g), -3))
p <- quote({
# Set margins to 0
par(mar=c(0,0,0,0),
mfrow=c(1,2))
plot(g, edge.curved = 0, layout=l1,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
legend(x=-1.1, y=1.1, names(cat_cols), pch=21, col="#777777", pt.bg=cat_cols, pt.cex=2, cex=.8, bty="n", ncol=1)
plot(g, edge.curved = 0, layout=l2,
vertex.label.family = "sans",
vertex.label.cex = 0.5,
vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
})
# Save files
saveRDS(g, "s1_g1.RData")
saveRDS(l1, "s1_l1.RData")
png("study1_network1.png", width = 960)
eval(p)
dev.off()
svg("study1_network1.svg", width = 14)
eval(p)
dev.off()
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
word_freq <- read.csv("study1_word_freq.csv", stringsAsFactors = FALSE)
word_graph <- read.csv("s1_cooc.csv", row.names = 1)
notingraph <- word_freq$Word[!word_freq$Word %in% row.names(word_graph)]
notingraph <- categ[categ$name %in% notingraph, ]
cats <- unique(notingraph$category)
notingraph <- lapply(cats, function(x){
out <- notingraph$name[notingraph$category == x]
out <- pretty_words(out)
paste0(paste0("*", out[-length(out)], "*", collapse = ", "), ", and *", tail(out, 1), "*")
})
names(notingraph) <- cats
lda_dims <- read_yaml("Study1_lda_dims.txt")
dtm_top <- read_yaml("study1_dtm_top.yml")
term_freq_dist <- read_yaml("study1_term_freq_dist.yml")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
