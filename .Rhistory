# check internal validation measures for k-means cluster result with a value of 75 for k
int_idx_75 <- intCriteria(glove_embedding, kmeans_fit75$cluster, c("Calinski_Harabasz", "Davies_Bouldin", "S_Dbw"))
# check internal validation measures for k-means cluster result with a value of 100 for k
int_idx_100 <- intCriteria(glove_embedding, kmeans_fit100$cluster, c("Calinski_Harabasz", "Davies_Bouldin", "S_Dbw"))
# check internal validation measures for k-means cluster result with a value of 150 for k
int_idx_150 <- intCriteria(glove_embedding, kmeans_fit150$cluster, c("Calinski_Harabasz", "Davies_Bouldin", "S_Dbw"))
View(int_idx_75)
View(int_idx_75)
View(int_idx_100)
View(kmeans_fit150)
View(kmeans_fit150)
View(int_idx_150)
View(int_idx_125)
View(int_idx_100)
View(int_idx_75)
# results
kmeans_fit125
# obtain the centroids
kmeans_fit125$centers
# look at the size of the clusters
kmeans_fit125$size
min(kmeans_fit125$size)
max(kmeans_fit125$size)
# The cost function in k means is the total sum of the squares
kmeans_fit125$totss
# silhouette width
sil <- silhouette(kmeans_fit125$cluster, dist(glove_embedding))
fviz_silhouette(sil)
## Check which words are clustered together
# Create data frame in which the cluster assignment is merged back to rows/word.
words_with_cluster125 <- as.data.frame(cbind(row.names(glove_embedding), kmeans_fit125$cluster))
# add column names
names(words_with_cluster125) <- c("word", "kmeans125")
# find out to which cluster the word mother is assigned
words_with_cluster125[words_with_cluster125$word == "mother", ]
# Check cluster with the smallest size
cluster125_97 <- subset(words_with_cluster125, subset=kmeans125 == 97)
# find out to which cluster the word yoga is assigned
words_with_cluster125[words_with_cluster125$word == "yoga", ]
# load the library that contains the Rtsne function
library(Rtsne)
# t-SNE visualization of cluster 97 (smallest cluster - GloVe (k = 125))
# create subset of terms and their associated word vectors that belong to cluster 97
embedding_cluster97 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_97$word)
# apply t-sne
tsne_clst97 <- Rtsne(embedding_cluster97, dims = 2, perplexity = 10, verbose=TRUE, max_iter = 500, pca = TRUE)
# create data frame of matrix that can be used for making the plot
embedding_cluster97_plot <- as.data.frame(embedding_cluster97)
# create a column with the terms
embedding_cluster97_plot$word <- rownames(embedding_cluster97_plot)
# funnction for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster {clst_number}") +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster" {clst_number}) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster" {clst_number}) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster" + {clst_number}) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster") +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster {clst_number}")) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = "97")
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
clst_number <- clst_number
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster {clst_number}")) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = "97")
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
clst_number <- clst_number
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster", clst_number)) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# function for creating plot of separate cluster
plot_cluster_tsne <-function(tsne_clst, embedding_cluster_plot, clst_number){
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = embedding_cluster97_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster ", clst_number)) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97_plot, clst_number = 97)
# create function for creating plot of separate clusters
plot_cluster_tsne <-function(tsne_clst, embedding_cluster, clst_number){
# create data frame of matrix that can be used for making the plot
cluster_embedding_plot <- as.data.frame(embedding_cluster)
# create a column with the terms
cluster_embedding_plot$word <- rownames(cluster_embedding_plot)
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = cluster_embedding_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster ", clst_number)) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97, clst_number = 97)
# TSNE VISUALIZATION OF CLUSTER 80 (family related cluster)
# create plot of separate cluster with tsne
embedding_cluster80 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_80$word)
# create separate data frame containing all terms that belong to one specific cluster
cluster125_80 <- subset(words_with_cluster125, subset=kmeans125 == 80)
# TSNE VISUALIZATION OF CLUSTER 80 (family related cluster)
# create plot of separate cluster with tsne
embedding_cluster80 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_80$word)
set.seed(88)
tsne_clst80 <- Rtsne(embedding_cluster80, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst80, embedding_cluster80, 80)
# find out in which cluster the word ethnic is assigned
words_with_cluster125[words_with_cluster125$word == "ethnic", ]
cluster125_75 <- subset(words_with_cluster125, subset=kmeans125 == 75)
# find out to which cluster the word academic is assigned
words_with_cluster125[words_with_cluster125$word == "academic", ]
cluster125_17 <- subset(words_with_cluster125, subset=kmeans125 == 17)
# find out to which cluster the word yoga is assigned
words_with_cluster125[words_with_cluster125$word == "yoga", ]
cluster125_28 <- subset(words_with_cluster125, subset=kmeans125 == 28)
# check a cluster with a low average silhouette width
cluster125_lowsil <- subset(words_with_cluster125, subset=kmeans125 == 27)
# check a cluster with a low average silhouette width
cluster125_lowsil2 <- subset(words_with_cluster125, subset=kmeans125 == 124)
## Cluster analysis within cluster
# create a matrix that only contains the terms and their associated word vectors that belong to one cluster (cluster 21)
embedding_cluster21 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_21$word)
## COMMENT TOEVOEGEN
cluster125_21 <- subset(words_with_cluster125, subset=kmeans125 == 21)
## Cluster analysis within cluster
# create a matrix that only contains the terms and their associated word vectors that belong to one cluster (cluster 21)
embedding_cluster21 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_21$word)
# apply k-means on this subset with k = 3
set.seed(88)
kmeans_fit3_cluster21 <- kmeans(embedding_cluster21, 3, iter.max = 30, nstart = 25)
# look at the resulting cluster assignments
# create data frame in which the merge cluster assignment back to rows/word.
words_with_cluster21_3 <- as.data.frame(cbind(row.names(embedding_cluster21), kmeans_fit3_cluster21$cluster))
# add column names
names(words_with_cluster21_3) <- c("word", "kmeans3")
# make data frames of the 3 resulting clusters to check which terms are assigned to which cluster
cluster21_1 <- subset(words_with_cluster21_3, subset=kmeans3 == 1)
cluster21_2 <- subset(words_with_cluster21_3, subset=kmeans3 == 2)
cluster21_3 <- subset(words_with_cluster21_3, subset=kmeans3 == 3)
# visualize the k-means (with k = 3) clusters
set.seed(88)
fviz_cluster(kmeans_fit3_cluster21, data = embedding_cluster21,
palette = c("#2E9FDF", "#00AFBB", "#E7B800"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
fviz_cluster(kmeans_fit3_cluster21, data = embedding_cluster21,
palette = c("#E7B800", "#2E9FDF", "#00AFBB"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
# K-means clustering - Word2Vec including bigrams (k = 125)
# fit the k-means clustering with 125 clusters on the data frame with word vectors extracted from word2vec and including bigram terms.
set.seed(88)
kmeans_fit125_w2v <- kmeans(w2v_bigrams_embedding, 125, iter.max = 30, nstart = 25)
# create data frame in which the cluster assignment is merged back to rows/word.
words_with_cluster125_w2v <- as.data.frame(cbind(row.names(w2v_bigrams_embedding), kmeans_fit125_w2v$cluster))
# add column names
names(words_with_cluster125_w2v) <- c("word", "kmeans125")
# find out to which cluster the word emotional_dysregulation is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "emotional_dysregulation", ]
# K-means clustering - Word2Vec including bigrams (k = 125)
# fit the k-means clustering with 125 clusters on the data frame with word vectors extracted from word2vec and including bigram terms.
set.seed(88)
kmeans_fit125_w2v <- kmeans(w2v_bigrams_embedding, 125, iter.max = 30, nstart = 25)
# look at the resulting cluster assignments
# create data frame in which the merge cluster assignment back to rows/word.
words_with_cluster21_3 <- as.data.frame(cbind(row.names(embedding_cluster21), kmeans_fit3_cluster21$cluster))
# add column names
names(words_with_cluster21_3) <- c("word", "kmeans3")
# make data frames of the 3 resulting clusters to check which terms are assigned to which cluster
cluster21_1 <- subset(words_with_cluster21_3, subset=kmeans3 == 1)
# create data frame in which the cluster assignment is merged back to rows/word.
words_with_cluster125_w2v <- as.data.frame(cbind(row.names(w2v_bigrams_embedding), kmeans_fit125_w2v$cluster))
# add column names
names(words_with_cluster125_w2v) <- c("word", "kmeans125")
# find out to which cluster the word emotional_dysregulation is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "emotional_dysregulation", ]
print("older warning message appears when running next function")
# visualize the k-means (with k = 3) clusters
set.seed(88)
fviz_cluster(kmeans_fit3_cluster21, data = embedding_cluster21,
palette = c("#E7B800", "#2E9FDF", "#00AFBB"),
ellipse.type = "euclid", # Concentration ellipse
star.plot = TRUE, # Add segments from centroids to items
repel = TRUE, # Avoid label overplotting (slow)
ggtheme = theme_minimal()
)
# K-means clustering - Word2Vec including bigrams (k = 125)
# fit the k-means clustering with 125 clusters on the data frame with word vectors extracted from word2vec and including bigram terms.
set.seed(88)
kmeans_fit125_w2v <- kmeans(w2v_bigrams_embedding, 125, iter.max = 30, nstart = 25)
# create data frame in which the cluster assignment is merged back to rows/word.
words_with_cluster125_w2v <- as.data.frame(cbind(row.names(w2v_bigrams_embedding), kmeans_fit125_w2v$cluster))
# add column names
names(words_with_cluster125_w2v) <- c("word", "kmeans125")
# find out to which cluster the word emotional_dysregulation is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "emotional_dysregulation", ]
# create data frame in which the cluster assignment is merged back to rows/word.
words_with_cluster125_w2v <- as.data.frame(cbind(row.names(w2v_bigrams_embedding), kmeans_fit125_w2v$cluster))
# add column names
names(words_with_cluster125_w2v) <- c("word", "kmeans125")
# find out to which cluster the word emotional_dysregulation is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "emotional_dysregulation", ]
cluster125_w2v_59 <- subset(words_with_cluster125_w2v, subset=kmeans125 == 59)
# find out to which cluster the word emotion is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "emotion", ]
cluster125_w2v_25 <- subset(words_with_cluster125_w2v, subset=kmeans125 == 25)
# find out to which cluster the word family is assigned
words_with_cluster125_w2v[words_with_cluster125_w2v$word == "family", ]
cluster125_w2v_113 <- subset(words_with_cluster125_w2v, subset=kmeans125 == 113)
# t-SNE visualization of cluster 17 (academic related - GloVe (k = 125))
# create subset of terms and their associated word vectors that belong to cluster 17
embedding_cluster17 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_17$word)
# apply t-sne
set.seed(88)
tsne_clst17 <- Rtsne(embedding_cluster17, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst17, embedding_cluster17, 17)
# t-SNE visualization of cluster 75 (ethnicity related) - GloVe (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 75
embedding_cluster75 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_75$word)
# apply t-sne
set.seed(88)
tsne_clst75 <- Rtsne(embedding_cluster75, dims = 2, perplexity = 20, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst75, embedding_cluster75, 75)
# t-SNE visualization of cluster 17 (academic related) - GloVe (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 17
embedding_cluster17 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_17$word)
# apply t-sne
set.seed(88)
tsne_clst17 <- Rtsne(embedding_cluster17, dims = 2, perplexity = 25, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst17, embedding_cluster17, 17)
# t-SNE visualization of cluster 124 (low silhouette average and terms with non, un, post, pre) - GloVe (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 124
embedding_cluster124 <- subset(glove_embedding, rownames(glove_embedding) %in% cluster125_lowsil2$word)
# apply t-sne
set.seed(88)
tsne_clst124 <- Rtsne(embedding_cluster124, dims = 2, perplexity = 20, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst124, embedding_cluster124, 124)
View(cluster125_lowsil2)
# t-SNE visualization of cluster 59 (smallest cluster) - Word2Vec including bigrams (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 59
embedding_cluster59_w2v <- subset(w2v_bigrams_embedding, rownames(w2v_bigrams_embedding) %in% cluster125_w2v_59$word)
# apply t-sne
set.seed(88)
tsne_clst_59_w2v <- Rtsne(embedding_cluster59_w2v, dims = 2, perplexity = 50, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst_59_w2v, embedding_cluster59_w2v, clst_number = "59 - w2v")
scale_colour_manual(values=c("#000000", "#ffcc00")) +
# t-SNE visualization of cluster 113 (family related) - Word2Vec including bigrams (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 113
embedding_cluster113_w2v <- subset(w2v_bigrams_embedding, rownames(w2v_bigrams_embedding) %in% cluster125_w2v_113$word)
# t-SNE visualization of cluster 113 (family related) - Word2Vec including bigrams (k = 125)
# create subset of terms and their associated word vectors that belong to cluster 113
embedding_cluster113_w2v <- subset(w2v_bigrams_embedding, rownames(w2v_bigrams_embedding) %in% cluster125_w2v_113$word)
# apply t-sne
set.seed(88)
tsne_clst_113_w2v <- Rtsne(embedding_cluster113_w2v, dims = 2, perplexity = 18, verbose=TRUE, max_iter = 500, pca = TRUE)
# call function to create plot
plot_cluster_tsne(tsne_clst_59_w2v, embedding_cluster59_w2v, clst_number = "59 - w2v")
# call function to create plot
plot_cluster_tsne(tsne_clst_113_w2v, embedding_cluster113_w2v, clst_number = "113 - w2v")
# call function to create plot
plot_cluster_tsne(tsne_clst_113_w2v, embedding_cluster113_w2v, clst_number = "113 - w2v")
View(cluster125_w2v_113)
# Function for creating separate
# create function for creating plot of separate clusters
plot_cluster_tsne <-function(tsne_clst, embedding_cluster, clst_number){
# create data frame of matrix that can be used for making the plot
cluster_embedding_plot <- as.data.frame(embedding_cluster)
# create a column with the terms
cluster_embedding_plot$word <- rownames(cluster_embedding_plot)
plot_df <- data.frame(tsne_clst$Y) %>%
mutate(
word = cluster_embedding_plot$word,
)
p <- ggplot(plot_df, aes(X1, X2)) +
geom_text(aes(X1, X2, label = word), size = 3) +
xlab("") + ylab("") +
ggtitle(paste0("2-dimensional t-SNE Mapping of Word Vectors Belonging to Cluster ", clst_number)) +
theme(legend.position = "none") +
theme_minimal()
return(p)
}
# call function to create plot
plot_cluster_tsne(tsne_clst97, embedding_cluster97, clst_number = 97)
# call function to create plot
plot_cluster_tsne(tsne_clst80, embedding_cluster80, 80)
# call function to create plot
plot_cluster_tsne(tsne_clst75, embedding_cluster75, 75)
# call function to create plot
plot_cluster_tsne(tsne_clst17, embedding_cluster17, 17)
# call function to create plot
plot_cluster_tsne(tsne_clst124, embedding_cluster124, 124)
# call function to create plot
plot_cluster_tsne(tsne_clst_113_w2v, embedding_cluster113_w2v, clst_number = "113 - w2v")
# call function to create plot
test <- plot_cluster_tsne(tsne_clst_113_w2v, embedding_cluster113_w2v, clst_number = "113 - w2v")
test +
xlim(-25, 30)
plot_clst59_w2v +
geom_text(aes(colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
theme_minimal()
# call function to create plot
plot_clst59_w2v <- plot_cluster_tsne(tsne_clst_59_w2v, embedding_cluster59_w2v, clst_number = "59 - w2v")
plot_clst59_w2v +
geom_text(aes(colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
theme_minimal()
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
theme_minimal()
plot_clst59_w2v +
geom_text(aes(label = word == "emotional_dysregulation", colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
theme_minimal()
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim() +
theme_minimal(-6, 6)
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim(-6, 6) +
theme_minimal()
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim(-5.7, 5.7) +
theme_minimal()
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim(-6, 6) +
theme_minimal()
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim(-5.5, 5.5) +
theme_minimal()
# highlight the word emotional_dysregulation and adjust limits of x-axis
plot_clst59_w2v +
geom_text(aes(label = word, colour = word == "emotional_dysregulation"), size = 3, show.legend = FALSE) +
scale_colour_manual(values=c("#000000", "#ffcc00")) +
theme(legend.position = "none") +
xlim(-5, 5) +
theme_minimal()
View(tsne_clst124)
worcs::git_update()
library(fpc)
library(dbscan)
set.seed(88)
db <- dbscan::dbscan(glove_embedding, 8, 5)
print(db)
library(SciViews)
ln(11562)
dbscan::kNNdistplot(glove_embedding, k =  9)
abline(h = 4.8, lty = 2)
abline(h = 8.3, lty = 2)
db_4.8_9 <- dbscan::dbscan(glove_embedding, 4.8, 9)
print(db_4.8_9)
db_6.5_600 <- dbscan::dbscan(glove_embedding, 6.5, 600)
print(db_6.5_600)
db4 <- dbscan::dbscan(glove_embedding, 4, 5)
print(db4)
View(cluster125_17)
worcs::git_update()
