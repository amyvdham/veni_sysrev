# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
total[total$excluded_rayyan == "True", ]
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
total[total$excluded_rayyan == "False", ]
# check hoe veel er in het eindbestand zitten met excluded_rayyan == True
unique(total$excluded_rayyan)
unique(total$included)
unique(total$rayyan)
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable notes Excluded zijn geassigned
unique(asreview_results[asreview_results$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")])
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
worcs::git_update()
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
asreview_results[asreview_results$record_id ==  96, "included"]
asreview_results[asreview_results$record_id ==  96, c("included", "title")]
asreview_results[asreview_results$doi ==  "https://doi.apa.org/doi/10.1037/fam0000574"", c("included", "title")]
asreview_results[asreview_results$doi ==  "https://doi.apa.org/doi/10.1037/fam0000574", c("included", "title")]
asreview_results[asreview_results$doi ==  "doi/10.1037/fam0000574", c("included", "title")]
asreview_results[asreview_results$doi ==  "doi.10.1037.fam0000574", c("included", "title")]
View(asreview_results)
asreview_results[asreview_results$authors ==  "CHERRY KE and GERSTEIN ED and CICIOLLA L", c("included", "title")]
asreview_results[asreview_results$authors ==  "PARSONS SK and BARLOW SE and LEVY SL and SUPRAN SE and KAPLAN SH", c("included", "title")]
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
summary(as.factor(total$included))
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
knitr::opts_chunk$set(echo = TRUE)
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
View(recs)
# create new dataframe called asreview_sim to which a new column can be added
asreview_sim <- recs
# add the column included
asreview_sim$included <- 1
summary(as.factor(asreview_sim$included))
library(psych)
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- ifelse(asreview_results$included == 0, 1,)
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- asreview_results
asreview_results_rev$included <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(unique(asreview_results[asreview_results$included == is.na() & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(unique(asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]))
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
length(asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")])
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[asreview_results$included == "Na" & asreview_results$rayan == "False", c("notes", "rayyan", "excluded_rayyan")]
View(asreview_results)
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- filter(asreview_results_rev, included == 0)
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- filter(asreview_results_rev$included == 0)
View(asreview_results_rev)
library(dplyr)
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- dplyr::filter(asreview_results_rev, included == 0)
# check columns of subset_irrelevant data frame asreview_sim data frame
str(asreview_results_rev)
str(asreview_sim)
View(asreview_sim)
# merge the two dataframes
asreview_simulation <- asreview_sim[asreview_results_rev]
# merge the two dataframes
asreview_simulation <- merge(asreview_results_rev, asreview_sim)
# merge the two dataframes
dt1 <- data.table(asreview_sim, key = "included")
dt2 <- data.table(asreview_results_rev, key = "included")
asreview_simulation <- dt1[dt2]
# merge the two dataframes
dt1 <- data.table(asreview_sim, key = "included")
dt2 <- data.table(subset_irrelevant, key = "included")
asreview_simulation <- dt1[dt2]
asreview_simulation <- semi_join(asreview_sim, subset_irrelevant, by = NULL, copy = FALSE)
View(asreview_simulation)
# select only those columns that are also in the asreview_sim dataframe
subset_irr <- subset_irrelevant[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "n_duplicates", "included")]
# merge the two dataframes
asreview_simulation <- merge(asreview_sim, subset_irr)
# merge the two dataframes
asreview_simulation <- rbind(asreview_sim, subset_irr)
?write.csv
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# create new dataframe called asreview_sim to which a new column can be added
asreview_sim <- recs
# add the column included
asreview_sim$included <- 1
summary(as.factor(asreview_sim$included))
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- asreview_results
asreview_results_rev$included <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly by comparing the two datasets
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- dplyr::filter(asreview_results_rev, included == 0)
# select only those columns that are also in the asreview_sim dataframe
subset_irr <- subset_irrelevant[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "n_duplicates", "included")]
# merge the two dataframes
asreview_simulation <- rbind(asreview_sim, subset_irr)
# save the dataframe
write.csv(asreview_simulation, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation.csv", row.names = FALSE)
summary(as.factor(asreview_sim$included))
summary(as.factor(asreview_simulation$included))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
# load .csv file into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# explore included column and other columns from asreview
unique(asreview_results$included)
summary(as.factor(asreview_results$included))
asreview_results[, c('included', 'asreview_ranking', 'record_id')]
max(asreview_results$asreview_ranking)
# check to recs file that is used in analysis to compare
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# try to merge the datasets
total <- merge(asreview_results, recs, by="doi")
summary(as.factor(total$included))
# check combinaties van columns notes, rayyan, excluded_rayyan en included
# unique combinaties voor records die op de variable notes included zijn geassigned
unique(total[total$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Included\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable notes Excluded zijn geassigned
unique(asreview_results[asreview_results$notes ==  " RAYYAN-INCLUSION: {\"Caspar\"=>\"Excluded\"}", c("rayyan", "excluded_rayyan", "included")])
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# check unique values for recs bestand (eind selectie)
unique(total$excluded_rayyan)
unique(total$included)
unique(total$rayyan)
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[is.na(asreview$included) & asreview_results$rayan == "False", ]
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
asreview_results[is.na(asreview_results$included) & asreview_results$rayan == "False", ]
unique(total$included)
unique(total$rayyan)
is.na(asreview_results$included)
# unique combinaties voor records die op de variable included 0 zijn geassigned
unique(asreview_results[asreview_results$included == 0, c("notes", "rayyan", "excluded_rayyan")])
# unique combinaties voor records die op de variable included 1 zijn geassigned
unique(asreview_results[asreview_results$included == 1, c("notes", "rayyan", "excluded_rayyan")])
# now that I know that I want to check how many records there are that score Na on included and False on rayyan. I expect to be at least twelve cases
unique(asreview_results[is.na(asreview_results$included), c("notes", "rayyan", "excluded_rayyan")])
asreview_results[is.na(asreview_results$included) & asreview_results$rayyan == "False", ]
asreview_results[is.na(asreview_results$included) & asreview_results$excluded_rayyan == "False", ]
length(asreview_results[is.na(asreview_results$included) & asreview_results$excluded_rayyan == "False", ])
length(asreview_results$included == 1 | asreview_results$rayyan == "False"))
length(asreview_results$included == 1 | asreview_results$rayyan == "False")
length(asreview_results$included == 1)
unique(asreview_results)
summary(as.factor(asreview_results$included))
criteria <- asreview_results[asreview_results$included == 1 | asreview_results$rayyan == "False", ]
criteria <- asreview_results[asreview_results$rayyan == "False", ]
summary(as.factor(criteria$included))
worcs::git_update()
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
test <- asreview_results
test$included2 <- ifelse(test$doi == recs$doi, 1, 0)
test$included2 <- ifelse(test$doi == recs$doi, 1, is.na())
View(test)
summary(as.factor(test$included2))
View(recs)
test2 <- asreview_results
test2$included2 <- ifelse(test2$doi %in% asreview_results$doi, 1, is.na())
summary(as.factor(test$included2))
summary(as.factor(test2$included2))
test2$included2 <- ifelse(test2$doi %in% recs$doi, 1, is.na())
test2$included2 <- ifelse(test2$doi %in% recs$doi, 1, NA)
summary(as.factor(test2$included2))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# rename the original included variable that was in the asreview_result_sysrevemotprob.csv to included_old so that we can call the new and correctly coded (1 = relevant, 0 = irrelevant) column included.
asr_results <- asreview_results
names(asr_results)[names(asr_results) == 'included'] <- 'included_old'
View(asr_results)
# create new included column in which 1 indeed indicates relevant. So all the articles that are in the data set recs have been deemed suitable for analysis so need to receive one on this new included variable.
asr_results$included <- ifelse(asr_results$doi %in% recs$doi, 1, NA)
# check if this went correctly
summary(as.factor(asr_results$included))
# give all records that have a value of 1 on the variable included_old (which was the revert coded variable) a value of 0 on the variable included
setDT(asr_results)[included_old == 1, included := 0]
# check if this went correctly
summary(as.factor(asr_results$included))
# check if this went correctly
summary(as.factor(asr_results$included))
# drop the column included_org to make sure this one is not taken as input in asreview
asr_results[ ,included_old := NULL]
# drop the column included_org to make sure this one is not taken as input in asreview
asr_results[ ,included_old := NULL]
# check if this went correctly
summary(as.factor(asr_results$included))
View(asr_results)
# check if this went correctly
summary(as.factor(asr_results$included))
# check if this went correctly
summary(as.factor(asr_results$included_old))
str(asr_results)
# check if this went correctly
summary(as.factor(asr_results$included_old))
# check if this went correctly
summary(as.factor(asr_results$included))
# save the new dataframe which also included the column abstracts
write.csv(asr_results, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation2.csv", row.names = FALSE)
wors::git_update()
worcs::git_update()
knitr::opts_chunk$set(echo = TRUE)
asreview_sim1 <- read.csv("asreview_simulation/asreview_simulation.csv")
asreview_sim1 <- read.csv("asreview_simulation/asreview_simulation2.csv")
asreview_sim1 <- read.csv("asreview_simulation/asreview_simulation.csv")
asreview_sim2 <- read.csv("asreview_simulation/asreview_simulation2.csv")
View(asreview_sim2)
summary(as.factor(asreview_sim1$included))
summary(as.factor(asreview_sim1$included))
library(data.table, quietly = TRUE, warn.conflicts = FALSE)
library(dplyr)
# load file with all the records that are screened in asreview into object
asreview_results <- read.csv("asreview_result_sysrevemotprob.csv")
# convert object into data table
asreview_results <- as.data.table(asreview_results)
# load file with the final records that are used in the paper into object
recs <- read.csv("recs_final.csv")
# convert object into data table
recs <- as.data.table(recs)
# create new dataframe called asreview_sim to which a new column can be added
asreview_sim <- recs
# add the column included
asreview_sim$included <- 1
summary(as.factor(asreview_sim$included))
# revert coding in asreview_results as Caspar mentioned that these are reversed coded
asreview_results_rev <- asreview_results
asreview_results_rev$included <- ifelse(asreview_results$included == 0, 1, 0)
# check recoding went correctly by comparing the two datasets
summary(as.factor(asreview_results$included))
summary(as.factor(asreview_results_rev$included))
# now that the records coded 0 in the dataset asreview_result_rev indeed represent the articles that were excluded we can subset these and add them to the dataframe asreview_sim
subset_irrelevant <- dplyr::filter(asreview_results_rev, included == 0)
# select only those columns that are also in the asreview_sim dataframe
subset_irr <- subset_irrelevant[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "n_duplicates", "included")]
# merge the two dataframes
asreview_simulation <- rbind(asreview_sim, subset_irr)
# check how many records are coded relevant 1 and irrelevant 0 in the final dataframe
summary(as.factor(asreview_simulation$included))
# rename the original included variable that was in the asreview_result_sysrevemotprob.csv to included_old so that we can call the new and correctly coded (1 = relevant, 0 = irrelevant) column included.
asr_results <- asreview_results
names(asr_results)[names(asr_results) == 'included'] <- 'included_old'
# create new included column in which 1 indeed indicates relevant. So all the articles that are in the data set recs have been deemed suitable for analysis so need to receive one on this new included variable.
asr_results$included <- ifelse(asr_results$doi %in% recs$doi, 1, NA)
# check if this went correctly
summary(as.factor(asr_results$included))
# give all records that have a value of 1 on the variable included_old (which was the revert coded variable) a value of 0 on the variable included
setDT(asr_results)[included_old == 1, included := 0]
# check if this went correctly
summary(as.factor(asr_results$included))
# make a subset of the dataframe
subset_asr <- asr_results[ ,c("PT", "AU", "AF", "TI", "SO", "LA", "DT", "DE", "ID", "AB", "C1", "RP", "EM", "FU", "FX", "NR", "TC", "Z9", "U1", "U2", "PU", "PI", "PA", "SN", "EI", "J9", "JI", "PD", "PY", "VL", "IS", "AR", "DI", "PG", "WC", "SC", "GA", "UT", "PM", "OA", "DA", "ER", "BP", "EP", "EA", "OI", "RI", "SI", "SU", "MA", "CA", "CT", "CY", "CL", "SP", "EF", "HC", "HP", "PN", "BE", "SE", "BN", "HO", "D2", "DB", "CR", "AU_UN", "AU1_UN", "AU_UN_NR", "SR_FULL", "SR", "doi", "title", "abstract", "n_duplicates", "included")]
# save the new dataframe which also included the column abstracts
write.csv(subset_asr, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation2.csv", row.names = FALSE)
asreview_sim1 <- read.csv("asreview_simulation/asreview_simulation.csv")
summary(as.factor(asreview_sim1$included))
asreview_sim2 <- read.csv("asreview_simulation/asreview_simulation2.csv")
summary(as.factor(asreview_sim2$included))
subset_asr <- as.data.table(subset_asr)
View(subset_asr)
summary(subset_asr$included)
summary(as.factor(subset_asr$included))
asreview_sim1 <- read.csv("asreview_simulation/asreview_simulation.csv")
summary(as.factor(asreview_sim1$included))
asreview_sim2 <- read.csv("asreview_simulation/asreview_simulation2.csv")
summary(as.factor(asreview_sim2$included))
# save the new dataframe which also included the column abstracts
write.csv(subset_asr, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation2.csv", row.names = FALSE)
# save the new dataframe which also included the column abstracts
write.csv(subset_asr, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation2.csv", row.names = FALSE)
View(subset_asr)
View(asreview_sim1)
# save the data frame which includes the abstract column
asreview_simulation$abstract <- asreview_results$abstract
# add the abstract column to asreview_simulation
merge(asreview_simulation, asreview_results[, c("doi", "abstract")], by="doi")
# add the abstract column to asreview_simulation
asreview_simulation3 <- merge(asreview_simulation, asreview_results[, c("doi", "abstract")], by="doi")
View(asreview_simulation3)
# save the data frame which includes the abstract column
write.csv(asreview_simulation3, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation.csv", row.names = FALSE)
# save the data frame which includes the abstract column
write.csv(asreview_simulation3, "/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/asreview_simulation3.csv", row.names = FALSE)
summary(as.factor(asreview_simulation3$included))
worcs::git_update()
worcs::git_update()
worcs::git_update()
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv")
View(dict_wordvecemb)
?read.csv
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv", col.names = "v1", "v2")
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv", col.names = "v")
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv")
View(dict_wordvecemb)
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv", header = FALSE)
View(dict_wordvecemb)
colnames(dict_wordvecemb)["V1"] <- "word"
colnames(dict_wordvecemb)[1] <- "word"
View(dict_wordvecemb)
# check structure of dataframe
str(dict_wordvecemb)
dict_wordvecemb[,5]
dict_wordvecemb[5, ]
dict_wordvecemb[1, ]
# check structure of dataframe
str(dict_wordvecemb)
length(dict_wordvecemb$word[1,])
length(dict_wordvecemb[1,"V2"])
before <- dict_wordvecemb
out <- strsplit(as.character(before$word),' ')
View(out)
out <- strsplit(as.character(before$V2),' ')
View(out)
do.call(rbind, out)
data.frame(before$word, do.call(rbind, out))
after <- data.frame(before$word, do.call(rbind, out))
View(after)
install.packages("splitstackshape")
# try to split the second column
library(splitstackshape)
cSplit(before, "V2", " ")
after <- cSplit(before, "V2", " ")
View(after)
dict_wordvecemb[1, ]
test <- strsplit(before$V2,"[")
strsplit(before$V2,"[")
View(before)
View(before)
test <- before %>% mutate(V2 = agsub("%", "", V2))
library(tidyverse)
test <- before %>% mutate(V2 = agsub("%", "", V2))
test <- before %>% mutate(V2 = gsub("%", "", V2))
View(test)
test <- before %>% mutate(V2 = gsub("[", "", V2))
test <- before %>% mutate(V2 = gsub("/n", "", V2))
View(test)
test[1,v2]
test[1,V2]
test[1,"V2"]
before$V3 <- sapply(before$V2, function(x), gsub("[", "",  x))
before$V3 <- sapply(before$V2, function(x) gsub("[", "",  x))
dict_wordvecemb$V3 <-gsub("[","",as.character(dict_wordvecemb$V2))
dict_wordvecemb$V3 <-gsub("[","",as.character(dict_wordvecemb$V2))
# load csv into object
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv", header = FALSE)
# adjust the first column name to word
colnames(dict_wordvecemb)[1] <- "word"
# check structure of dataframe
str(dict_wordvecemb)
View(dict_wordvecemb)
# try to split the second column
library(splitstackshape)
after <- cSplit(before, "V2", " ")
after <- cSplit(dict_wordvecemb, "V2", " ")
View(dict_wordvecemb)
View(after)
warnings()
dict_wordvecemb$V3 <-gsub("[","",as.character(dict_wordvecemb$V2))
dict_wordvecemb$V3 <-gsub("\\[","",as.character(dict_wordvecemb$V2))
View(dict_wordvecemb)
dict_wordvecemb$V3 <-gsub("[\\[//]]","",as.character(dict_wordvecemb$V2))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\[\\]","",as.character(dict_wordvecemb$V2))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\[","",as.character(dict_wordvecemb$V2))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\]","",as.character(dict_wordvecemb$V2))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\\n","",as.character(dict_wordvecemb$V2))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\]","",as.character(dict_wordvecemb$V3))
dict_wordvecemb$V3 <-gsub("\\\n","",as.character(dict_wordvecemb$V3))
dict_wordvecemb$V3 <-gsub("\\]","",as.character(dict_wordvecemb$V3))
dict_wordvecemb[1, "V3"]
dict_wordvecemb$V3 <-gsub("\\[","",as.character(dict_wordvecemb$V2))
dict_wordvecemb$V3 <-gsub("\\]","",as.character(dict_wordvecemb$V3))
dict_wordvecemb$V3 <-gsub("\\\n","",as.character(dict_wordvecemb$V3))
dict_wordvecemb[1, "V3"]
# try to split the second column
library(splitstackshape
after <- cSplit(dict_wordvecemb, "V3", " ")
# try to split the second column
library(splitstackshape)
after <- cSplit(dict_wordvecemb, "V3", " ")
View(after)
# create new data frame that can be used for applying adjustments
df_wordvecemb <- dict_wordvecemb
# remove the [ character from V2
df_wordvecemb$V2 <-gsub("\\[","",as.character(df_wordvecemb$V2))
# remove the ] character from V2
df_wordvecemb$V2 <-gsub("\\]","",as.character(df_wordvecemb$V2))
# remove the \n character from V2
df_wordvecemb$V2 <-gsub("\\\n","",as.character(df_wordvecemb$V2))
# check if removing the characters went correctly
df_wordvecemb[1,"V2"]
# separate on the space
df_wordvecemb <- cSplit(df_wordvecemb, "V2", " ")
View(df_wordvecemb)
# load csv into object
dict_wordvecemb <- read.csv("/Users/amyvanderham/Documents/Research_Assistant_Rgit/veni_sysrev/asreview_simulation/dict_wordvec.csv", header = FALSE)
# adjust the first column name to word
colnames(dict_wordvecemb)[1] <- "word"
# check structure of dataframe
str(dict_wordvecemb)
# remove certain characters from the column V2 which now is column of the type
# character and contains a string as value.
library(tidyverse)
# create new data frame that can be used for applying adjustments
df_wordvecemb <- dict_wordvecemb
# remove the [ character from V2
df_wordvecemb$V2 <-gsub("\\[","",as.character(df_wordvecemb$V2))
# remove the ] character from V2
df_wordvecemb$V2 <-gsub("\\]","",as.character(df_wordvecemb$V2))
# remove the \n character from V2
df_wordvecemb$V2 <-gsub("\\\n","",as.character(df_wordvecemb$V2))
# check if removing the characters went correctly
df_wordvecemb[1,"V2"]
# split column V2 into multiple columns
library(splitstackshape)
# separate on the space
df_wordvecemb <- cSplit(df_wordvecemb, "V2", " ")
View(df_wordvecemb)
# retain dimensions of data frame
dim(df_wordvecemb)
colnames(df) <- c("word", paste0("dim", 1:40))
# rename columns test
df <- df_vecemb
colnames(df) <- c("word", paste0("dim", 1:40))
# rename columns test
df <- df_wordvecemb
colnames(df) <- c("word", paste0("dim", 1:40))
View(df)
worcs::git_update()
