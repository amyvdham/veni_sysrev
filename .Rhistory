#
data$sex<-as.factor(data$sex)
levels(data$sex)<-c("male", "female", "transgendered")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
library(psych)
keys.list<-list( R1=c("mr1", "mr2", "mr3"), R2=c("mr4", "mr5", "mr6"), R3=c("mr7", "mr8", "mr9"), R4=c("mr10", "mr11", "mr12"), R5=c("mr13", "mr14", "mr15"), R6=c("mr16", "mr17", "mr18"), R7=c("mr19", "mr20", "mr21"), J1=c("mj1", "mj2", "mj3"), J2=c("mj4", "mj5", "mj6"), J3=c("mj7", "mj8", "mj9"), J4=c("mj10", "mj11", "mj12"), J5=c("mj13", "mj14", "mj15"), J6=c("mj16", "mj17", "mj18"), J7=c("mj19", "mj20", "mj21"), T1=c("mr1", "mr2", "mr3","mj1", "mj2", "mj3"), T2=c("mr4", "mr5", "mr6","mj4", "mj5", "mj6"), T3=c("mr7", "mr8", "mr9","mj7", "mj8", "mj9"), T4=c("mr10", "mr11", "mr12","mj10", "mj11", "mj12"), T5=c("mr13", "mr14", "mr15","mj13", "mj14", "mj15"), T6=c("mr16", "mr17", "mr18","mj16", "mj17", "mj18"), T7=c("mr19", "mr20", "mr21","mj19", "mj20", "mj21"), MFQR1=c("mfqr1", "mfqr2", "mfqr3"), MFQR2=c("mfqr4", "mfqr5", "mfqr6"), MFQR3=c("mfqr7", "mfqr8", "mfqr9"), MFQR4=c("mfqr10", "mfqr11", "mfqr12"), MFQR5=c("mfqr13", "mfqr14", "mfqr15"), MFQJ1=c("mfqj1", "mfqj2", "mfqj3"), MFQJ2=c("mfqj4", "mfqj5", "mfqj6"), MFQJ3=c("mfqj7", "mfqj8", "mfqj9"), MFQJ4=c("mfqj10", "mfqj11", "mfqj12"), MFQJ5=c("mfqj13", "mfqj14", "mfqj15"), MFQT1=c("mfqr1", "mfqr2", "mfqr3","mfqj1", "mfqj2", "mfqj3"), MFQT2=c("mfqr4", "mfqr5", "mfqr6","mfqj4", "mfqj5", "mfqj6"), MFQT3=c("mfqr7", "mfqr8", "mfqr9","mfqj7", "mfqj8", "mfqj9"), MFQT4=c("mfqr10", "mfqr11", "mfqr12","mfqj10", "mfqj11", "mfqj12"), MFQT5=c("mfqr13", "mfqr14", "mfqr15","mfqj13", "mfqj14", "mfqj15") )
length(names(data)[grep("^m", names(data))])
keys<-make.keys(length(names(data)[grep("^m", names(data))]), keys.list=keys.list,item.labels=names(data)[grep("^m", names(data))])
scores <- scoreItems(keys,data[names(data)[grep("^m", names(data))]])
dim(scores$scores)
dim(oldscoredat)
scores$alpha
cordat<-data.frame(data$pid, scores$scores)
#
#End compute scores for validation data
#
#
#Compute test-retest correlation
#
names(cordat)[1]<-"pid"
names(oldscoredat)[1]<-"pid"
retdat<-merge(oldscoredat, cordat, by="pid")
View(retdat)
anyNA(retdat)
scores <- scoreItems(keys,data[names(data)[grep("^m", names(data))]], impute = "none")
dim(scores$scores)
anyNA(scores$scores)
cordat<-data.frame(data$pid, scores$scores)
names(cordat)[1]<-"pid"
names(oldscoredat)[1]<-"pid"
retdat<-merge(oldscoredat, cordat, by="pid")
anyNA(retdat)
scores <- scoreItems(keys,data[names(data)[grep("^m", names(data))]], missing = FALSE, impute = "none")
scores$scores
#install.packages("foreign")
library(foreign)
#install.packages("dplyr")
library(dplyr)
#install.packages("psychometric")
library(psychometric)
#install.packages("MplusAutomation")
library(MplusAutomation)
#install.packages("pastecs")
library(pastecs)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("psych")
library(psych)
wd<-"C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata"
setwd(wd)
load("MAC Clean syntax workspace.RData")
View(data)
olddata<-data
oldscoredat<-data.frame(olddata$pid, cordat)
scanArgs <- list(
file = "C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
names(retestdata)<-tolower(names(retestdata))
#
#Recode items
#
data$sex<-as.factor(data$sex)
levels(data$sex)<-c("male", "female", "transgendered")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
#
#Check assumptions for full data
#
library(psych)
describe(dplyr::select(data, mr1:mj21))
#For MR
datamr<-dplyr::select(data, mr1:mr21)
cormr<-cor(datamr, use="pairwise.complete.obs")
det(cormr)
#For mj
datamj<-dplyr::select(data, mj1:mj21)
cormj<-cor(datamj, use="pairwise.complete.obs")
det(cormj)
#Descriptives
table(data$sex) #male 75       female 76
mean(data$age) #52.46
sd(data$age) #15.71
#
#Compute scores for validation data
#
library(psych)
keys.list<-list( R1=c("mr1", "mr2", "mr3"), R2=c("mr4", "mr5", "mr6"), R3=c("mr7", "mr8", "mr9"), R4=c("mr10", "mr11", "mr12"), R5=c("mr13", "mr14", "mr15"), R6=c("mr16", "mr17", "mr18"), R7=c("mr19", "mr20", "mr21"), J1=c("mj1", "mj2", "mj3"), J2=c("mj4", "mj5", "mj6"), J3=c("mj7", "mj8", "mj9"), J4=c("mj10", "mj11", "mj12"), J5=c("mj13", "mj14", "mj15"), J6=c("mj16", "mj17", "mj18"), J7=c("mj19", "mj20", "mj21"), T1=c("mr1", "mr2", "mr3","mj1", "mj2", "mj3"), T2=c("mr4", "mr5", "mr6","mj4", "mj5", "mj6"), T3=c("mr7", "mr8", "mr9","mj7", "mj8", "mj9"), T4=c("mr10", "mr11", "mr12","mj10", "mj11", "mj12"), T5=c("mr13", "mr14", "mr15","mj13", "mj14", "mj15"), T6=c("mr16", "mr17", "mr18","mj16", "mj17", "mj18"), T7=c("mr19", "mr20", "mr21","mj19", "mj20", "mj21"), MFQR1=c("mfqr1", "mfqr2", "mfqr3"), MFQR2=c("mfqr4", "mfqr5", "mfqr6"), MFQR3=c("mfqr7", "mfqr8", "mfqr9"), MFQR4=c("mfqr10", "mfqr11", "mfqr12"), MFQR5=c("mfqr13", "mfqr14", "mfqr15"), MFQJ1=c("mfqj1", "mfqj2", "mfqj3"), MFQJ2=c("mfqj4", "mfqj5", "mfqj6"), MFQJ3=c("mfqj7", "mfqj8", "mfqj9"), MFQJ4=c("mfqj10", "mfqj11", "mfqj12"), MFQJ5=c("mfqj13", "mfqj14", "mfqj15"), MFQT1=c("mfqr1", "mfqr2", "mfqr3","mfqj1", "mfqj2", "mfqj3"), MFQT2=c("mfqr4", "mfqr5", "mfqr6","mfqj4", "mfqj5", "mfqj6"), MFQT3=c("mfqr7", "mfqr8", "mfqr9","mfqj7", "mfqj8", "mfqj9"), MFQT4=c("mfqr10", "mfqr11", "mfqr12","mfqj10", "mfqj11", "mfqj12"), MFQT5=c("mfqr13", "mfqr14", "mfqr15","mfqj13", "mfqj14", "mfqj15") )
data <- retestdata
data$sex<-as.factor(data$sex)
levels(data$sex)<-c("male", "female", "transgendered")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
data <- retestdata
#install.packages("foreign")
library(foreign)
#install.packages("dplyr")
library(dplyr)
#install.packages("psychometric")
library(psychometric)
#install.packages("MplusAutomation")
library(MplusAutomation)
#install.packages("pastecs")
library(pastecs)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("psych")
library(psych)
wd<-"C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata"
setwd(wd)
load("MAC Clean syntax workspace.RData")
olddata<-data
oldscoredat<-data.frame(olddata$pid, cordat)
scanArgs <- list(
file = "C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/Caspar/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
#install.packages("foreign")
library(foreign)
#install.packages("dplyr")
library(dplyr)
#install.packages("psychometric")
library(psychometric)
#install.packages("MplusAutomation")
library(MplusAutomation)
#install.packages("pastecs")
library(pastecs)
#install.packages("ggplot2")
library(ggplot2)
#install.packages("psych")
library(psych)
wd<-"C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata"
setwd(wd)
load("MAC Clean syntax workspace.RData")
olddata<-data
oldscoredat<-data.frame(olddata$pid, cordat)
scanArgs <- list(
file = "C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
names(retestdata)<-tolower(names(retestdata))
data <- retestdata
data$sex<-as.factor(data$sex)
levels(data$sex)<-c("male", "female", "transgendered")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
library(psych)
describe(dplyr::select(data, mr1:mj21))
datamr<-dplyr::select(data, mr1:mr21)
cormr<-cor(datamr, use="pairwise.complete.obs")
det(cormr)
datamj<-dplyr::select(data, mj1:mj21)
cormj<-cor(datamj, use="pairwise.complete.obs")
det(cormj)
table(data$sex) #male 75       female 76
mean(data$age) #52.46
sd(data$age) #15.71
#
#Compute scores for validation data
#
library(psych)
keys.list<-list( R1=c("mr1", "mr2", "mr3"), R2=c("mr4", "mr5", "mr6"), R3=c("mr7", "mr8", "mr9"), R4=c("mr10", "mr11", "mr12"), R5=c("mr13", "mr14", "mr15"), R6=c("mr16", "mr17", "mr18"), R7=c("mr19", "mr20", "mr21"), J1=c("mj1", "mj2", "mj3"), J2=c("mj4", "mj5", "mj6"), J3=c("mj7", "mj8", "mj9"), J4=c("mj10", "mj11", "mj12"), J5=c("mj13", "mj14", "mj15"), J6=c("mj16", "mj17", "mj18"), J7=c("mj19", "mj20", "mj21"), T1=c("mr1", "mr2", "mr3","mj1", "mj2", "mj3"), T2=c("mr4", "mr5", "mr6","mj4", "mj5", "mj6"), T3=c("mr7", "mr8", "mr9","mj7", "mj8", "mj9"), T4=c("mr10", "mr11", "mr12","mj10", "mj11", "mj12"), T5=c("mr13", "mr14", "mr15","mj13", "mj14", "mj15"), T6=c("mr16", "mr17", "mr18","mj16", "mj17", "mj18"), T7=c("mr19", "mr20", "mr21","mj19", "mj20", "mj21"), MFQR1=c("mfqr1", "mfqr2", "mfqr3"), MFQR2=c("mfqr4", "mfqr5", "mfqr6"), MFQR3=c("mfqr7", "mfqr8", "mfqr9"), MFQR4=c("mfqr10", "mfqr11", "mfqr12"), MFQR5=c("mfqr13", "mfqr14", "mfqr15"), MFQJ1=c("mfqj1", "mfqj2", "mfqj3"), MFQJ2=c("mfqj4", "mfqj5", "mfqj6"), MFQJ3=c("mfqj7", "mfqj8", "mfqj9"), MFQJ4=c("mfqj10", "mfqj11", "mfqj12"), MFQJ5=c("mfqj13", "mfqj14", "mfqj15"), MFQT1=c("mfqr1", "mfqr2", "mfqr3","mfqj1", "mfqj2", "mfqj3"), MFQT2=c("mfqr4", "mfqr5", "mfqr6","mfqj4", "mfqj5", "mfqj6"), MFQT3=c("mfqr7", "mfqr8", "mfqr9","mfqj7", "mfqj8", "mfqj9"), MFQT4=c("mfqr10", "mfqr11", "mfqr12","mfqj10", "mfqj11", "mfqj12"), MFQT5=c("mfqr13", "mfqr14", "mfqr15","mfqj13", "mfqj14", "mfqj15") )
length(names(data)[grep("^m", names(data))])
keys<-make.keys(length(names(data)[grep("^m", names(data))]), keys.list=keys.list,item.labels=names(data)[grep("^m", names(data))])
scores <- scoreItems(keys,data[names(data)[grep("^m", names(data))]], impute = "none")
scores$scores
dim(scores$scores)
scores$alpha
cordat<-data.frame(data$pid, scores$scores)
names(cordat)[1]<-"pid"
names(oldscoredat)[1]<-"pid"
retdat<-merge(oldscoredat, cordat, by="pid", all.y = TRUE)
library(dplyr)
names(retdat)<-tolower(names(retdat))
retdat<-dplyr::select(retdat, pid, ends_with("x"), ends_with("y"))
names(retdat)
names(retdat)<-gsub("\\.x", "_1", names(retdat))
names(retdat)<-gsub("\\.y", "_2", names(retdat))
retestcors<-cor(retdat[grep("_1", names(retdat))], retdat[grep("_2", names(retdat))])
retestreliability<-diag(retestcors)
retestreliability
names(retestreliability)<-gsub("_1", "", grep("_1", names(retdat), value = TRUE))
# Sorry for the messy syntax, this is really old
library(foreign)
library(dplyr)
load("MAC Clean syntax workspace.RData")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
data$WAVE <- 1
data$ID <- data$pid
w1 <- data[, c("ID", "WAVE", grep("^m([rj]|fq[rj])\\d+$", names(data), value = TRUE))]
names(w1) <- toupper(names(w1))
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^M[RJ]\\d+$", names(w1))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w1)[grep("^M[RJ]\\d+$", names(w1))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))] <- paste0("MFQ_", 1:30)
scanArgs <- list(
file = "C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
names(retestdata)[1] <- "ID"
retestdata$WAVE <- 2
w2 <- retestdata[, c("ID", "WAVE", grep("^M([RJ]|FQ[RJ])\\d+$", names(retestdata), value = TRUE))]
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^M[RJ]\\d+$", names(w2))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w2)[grep("^M[RJ]\\d+$", names(w2))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))] <- paste0("MFQ_", 1:30)
df <- rbind(w1, w2)
table(table(df$ID))
#
# 1   2
# 367 151
df <- df[df$ID %in% names(table(df$ID))[table(df$ID) == 2], ]
#
# NOTE: The syntax assum
# Initialize dataframe (cor.df)
cor.df <- data.frame(row.names = c("Item", "df", "r", "95CI_lower", "95CI_upper"))
# For each item on the MFQ and MAC-Q, get Pearson correlation,
# degree of freedom and 95% CI; store in cor.df
var.names <- c("MFQ_1", "MFQ_2", "MFQ_3", "MFQ_4", "MFQ_5", "MFQ_6", "MFQ_7",
"MFQ_8", "MFQ_9", "MFQ_10", "MFQ_11", "MFQ_12", "MFQ_13", "MFQ_14",
"MFQ_15", "MFQ_16", "MFQ_17", "MFQ_18", "MFQ_19", "MFQ_20", "MFQ_21",
"MFQ_22", "MFQ_23", "MFQ_24", "MFQ_25", "MFQ_26", "MFQ_27", "MFQ_28",
"MFQ_29", "MFQ_30", "MACQ_1", "MACQ_2", "MACQ_3", "MACQ_4", "MACQ_5",
"MACQ_6", "MACQ_7", "MACQ_8", "MACQ_9", "MACQ_10", "MACQ_11", "MACQ_12",
"MACQ_13", "MACQ_14", "MACQ_15", "MACQ_16", "MACQ_17", "MACQ_18", "MACQ_19",
"MACQ_20", "MACQ_21", "MACQ_22", "MACQ_23", "MACQ_24", "MACQ_25", "MACQ_26",
"MACQ_27", "MACQ_28", "MACQ_29", "MACQ_30", "MACQ_31", "MACQ_32", "MACQ_33",
"MACQ_34", "MACQ_35", "MACQ_36", "MACQ_37", "MACQ_38", "MACQ_39", "MACQ_40",
"MACQ_41", "MACQ_42")
var.names
n = var.names[1]
df[df$WAVE == 1, n]
df[df$WAVE == 2, n]
# Sorry for the messy syntax, this is really old
library(foreign)
library(dplyr)
load("MAC Clean syntax workspace.RData")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
data$WAVE <- 1
data$ID <- data$pid
w1 <- data[, c("ID", "WAVE", grep("^m([rj]|fq[rj])\\d+$", names(data), value = TRUE))]
names(w1) <- toupper(names(w1))
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^M[RJ]\\d+$", names(w1))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w1)[grep("^M[RJ]\\d+$", names(w1))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))] <- paste0("MFQ_", 1:30)
scanArgs <- list(
file = "C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
names(retestdata)[1] <- "ID"
retestdata$WAVE <- 2
w2 <- retestdata[, c("ID", "WAVE", grep("^M([RJ]|FQ[RJ])\\d+$", names(retestdata), value = TRUE))]
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^M[RJ]\\d+$", names(w2))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w2)[grep("^M[RJ]\\d+$", names(w2))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))] <- paste0("MFQ_", 1:30)
df <- merge(w1, w2, by = "ID")
df[grep("^WAVE", names(df))] <- NULL
var_names <- grep("\\.[xy]$", names(df))
var_names
var_names <- grep("\\.[xy]$", names(df), value = TRUE)
var_names
var_names <- unique(gsub("\\.[xy]$", "", var_names))
var_names
thisvar = "MACQ_1"
df[grep(paste0("^", thisvar, "\\.[xy]$", names(df))]
df[grep(paste0("^", thisvar, "\\.[xy]$"), names(df))]
cor.test(df[grep(paste0("^", thisvar, "\\.[xy]$"), names(df))],
use = "pairwise.complete.obs", method = "pearson")
r <- cor.test(df[, grep(paste0("^", thisvar, "\\.[xy]$"), names(df))],
use = "pairwise.complete.obs", method = "pearson")
r <- cor.test(as.matrix(df[, grep(paste0("^", thisvar, "\\.[xy]$"), names(df))]),
use = "pairwise.complete.obs", method = "pearson")
r <- cor.test(df[[paste0(thisvar, ".x")]], df[[paste0(thisvar, ".y")]],
use = "pairwise.complete.obs", method = "pearson")
r
cor.df <- rbind(cor.df, data.frame("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2]))
cor.df
c("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2]))
c("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2])
sapply(var_names, function(thisvar){
r <- cor.test(df[[paste0(thisvar, ".x")]], df[[paste0(thisvar, ".y")]],
use = "pairwise.complete.obs", method = "pearson")
c("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2])
})
cor.df <- t(sapply(var_names, function(thisvar){
r <- cor.test(df[[paste0(thisvar, ".x")]], df[[paste0(thisvar, ".y")]],
use = "pairwise.complete.obs", method = "pearson")
c("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2])
}))
# Save cor.df in a file
write.csv(x = cor.df, file = "cor.csv")
cor.df <- t(sapply(var_names, function(thisvar){
r <- cor.test(df[[paste0(thisvar, ".x")]], df[[paste0(thisvar, ".y")]],
use = "pairwise.complete.obs", method = "pearson")
c("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2])
}))
# Save cor.df in a file
write.csv(x = cor.df, file = "cor.csv")
shift <- df[[paste0(thisvar, ".x")]] - df[[paste0(thisvar, ".y")]]
shift
range(df[[paste0(thisvar, ".x")]])
range(df[[paste0(thisvar, ".y")]])
cut(df[[paste0(thisvar, ".y")]], 2)
cut(df[[paste0(thisvar, ".x")]], 2) == cut(df[[paste0(thisvar, ".y")]], 2)
as.numeric(!(cut(df[[paste0(thisvar, ".x")]], 2) == cut(df[[paste0(thisvar, ".y")]], 2)))
rev <- as.numeric(!(cut(df[[paste0(thisvar, ".x")]], 2) == cut(df[[paste0(thisvar, ".y")]], 2)))
shift.val <- c(); shift.freq <- c(); rev.freq <- c()
for(s in unique(shift)){
shift.val <- c(shift.val, s)
shift.freq <- c(shift.freq, sum(shift == s))
rev.freq <- c(rev.freq, sum(rev[shift == s]))
}
shift.val
shift.freq
rev.freq
c("Item" = n, "Shift_value" = shift.val,
"Shift_frequency" = shift.freq, "Rev_frequency" = rev.freq)
n
shift.val
# Sorry for the messy syntax, this is really old
library(foreign)
library(dplyr)
load("MAC Clean syntax workspace.RData")
data$mj19<-(100-data$mj19)
data$mj20<-(100-data$mj20)
data$mj21<-(100-data$mj21)
data$WAVE <- 1
data$ID <- data$pid
w1 <- data[, c("ID", "WAVE", grep("^m([rj]|fq[rj])\\d+$", names(data), value = TRUE))]
names(w1) <- toupper(names(w1))
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^M[RJ]\\d+$", names(w1))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w1)[grep("^M[RJ]\\d+$", names(w1))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w1)[grep("^MFQ[RJ]\\d+$", names(w1))] <- paste0("MFQ_", 1:30)
scanArgs <- list(
file = "C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", what = "", nlines = 1, sep = ",", strip.white = TRUE)
## read the data with no header and add the first line as names
retestdata <- setNames(read.table("C:/Users/lissa102/Dropbox/Moral/Validation study/Fulldata/MAC Validation retest data.csv", skip = 2, sep = ",", na.strings=c("", " ")), do.call(scan, scanArgs))
## make the label vector
retestlabels <- setNames(do.call(scan, c(scanArgs, skip = 1)), names(df))
names(retestdata)[1] <- "ID"
retestdata$WAVE <- 2
w2 <- retestdata[, c("ID", "WAVE", grep("^M([RJ]|FQ[RJ])\\d+$", names(retestdata), value = TRUE))]
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^M[RJ]\\d+$", names(w2))]))) %in% c(1, -20))){
stop("Wrong order")
}
names(w2)[grep("^M[RJ]\\d+$", names(w2))] <- paste0("MACQ_", 1:42)
if(!all(diff(as.numeric(gsub("[A-Z]", "", names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))]))) %in% c(1, -14))){
stop("Wrong order")
}
names(w2)[grep("^MFQ[RJ]\\d+$", names(w2))] <- paste0("MFQ_", 1:30)
df <- rbind(w1, w2)
df <- df[df$ID %in% names(table(df$ID))[table(df$ID) == 2], ]
## Order dataset by participant id (where participant id is stored in column ID)
df <- df[order(df$ID),]
View(df)
df <- df[order(df$ID, df$WAVE),]
mfq.names <- c("MFQ_1", "MFQ_2", "MFQ_3", "MFQ_4", "MFQ_5", "MFQ_6", "MFQ_7",
"MFQ_8", "MFQ_9", "MFQ_10", "MFQ_11", "MFQ_12", "MFQ_13", "MFQ_14",
"MFQ_15", "MFQ_16", "MFQ_17", "MFQ_18", "MFQ_19", "MFQ_20", "MFQ_21",
"MFQ_22", "MFQ_23", "MFQ_24", "MFQ_25", "MFQ_26", "MFQ_27", "MFQ_28",
"MFQ_29", "MFQ_30")
macq.names <- c("MACQ_1", "MACQ_2", "MACQ_3", "MACQ_4", "MACQ_5",
"MACQ_6", "MACQ_7", "MACQ_8", "MACQ_9", "MACQ_10", "MACQ_11", "MACQ_12",
"MACQ_13", "MACQ_14", "MACQ_15", "MACQ_16", "MACQ_17", "MACQ_18", "MACQ_19",
"MACQ_20", "MACQ_21", "MACQ_22", "MACQ_23", "MACQ_24", "MACQ_25", "MACQ_26",
"MACQ_27", "MACQ_28", "MACQ_29", "MACQ_30", "MACQ_31", "MACQ_32", "MACQ_33",
"MACQ_34", "MACQ_35", "MACQ_36", "MACQ_37", "MACQ_38", "MACQ_39", "MACQ_40",
"MACQ_41", "MACQ_42")
# Get scale-midpoints of MFQ, MAC-Q (needed for calculating rating reversals in table 2)
midpoint.mfq <- (max(df[, mfq.names]) - min(df[, mfq.names]))/2
midpoint.macq <- (max(df[, macq.names]) - min(df[, macq.names]))/2
### ###
## Itemwise test-retest correlations
# Initialize dataframe (cor.df)
cor.df <- data.frame(row.names = c("Item", "df", "r", "95CI_lower", "95CI_upper"))
# For each item on the MFQ and MAC-Q, get Pearson correlation,
# degree of freedom and 95% CI; store in cor.df
var.names <- c(mfq.names, macq.names)
for(n in var.names){
r <- cor.test(df[df$WAVE == 1, n], df[df$WAVE == 2, n],
use = "pairwise.complete.obs", method = "pearson")
cor.df <- rbind(cor.df, data.frame("Item" = n, "df" = r$parameter,
"r" = r$estimate, "95CI_lower" = r$conf.int[1], "95CI_upper" = r$conf.int[2]))
}
# Save cor.df in a file
write.csv(x = cor.df, file = "cor.csv")
## Rating shifts (rating changes between wave 2 and wave 1) and
## rating reversals (rating shifts that cross the scale midpoint [= 50])
### ----> EXPLANATION of the code below <----- ###
# # Table 2 is about rating shifts and rating reversals.
# # For each item and participant, I define a RATING SHIFT as rating in wave 2 - rating in wave 1:
# shift <- df[df$WAVE == 2, n] - df[df$WAVE == 1, n]
# # For each item and participant, I define a rating reversal as a rating shift that crosses the
# # "scale-midpoint". The "scale-midpoint" is different for the MAC-Q and the MFQ. For the MAC-Q,
# # it is 50; for the MFQ, it is 2.5. Hence, the two different for loops below (I'm sure this can be
# # done more elegantly). In the MAC-Q for loop:
# rev <- ifelse(df[df$WAVE == 2, n] < midpoint.macq & df[df$WAVE == 1, n] > midpoint.macq, 1,
#         ifelse(df[df$WAVE == 2, n] > midpoint.macq & df[df$WAVE == 1, n] < midpoint.macq, 1, 0))
# # In the MFQ for loop:
# rev <- ifelse(df[df$WAVE == 2, n] < midpoint.mfq & df[df$WAVE == 1, n] > midpoint.mfq, 1,
#               ifelse(df[df$WAVE == 2, n] > midpoint.mfq & df[df$WAVE == 1, n] < midpoint.mfq, 1, 0))
# # Table 2 itself contains four columns. "Item" contains the name of the item (e.g. MFQ_1, MACQ_13, etc.).
# # For each item, "Shift value" contains the unique rating shift values that occured for that item (shift.val). For
# # each item and unique rating shift value that occured for that item, "Shift_frequency" contains the number
# # of participants who exhibited a rating shift of that value (shift.freq). Finally, for each item and unique rating shift
# # value that occured for that item, "Rev_frequency" contains the number of participants for whom this rating
# #  shift constituted a rating reversal, i.e. that crossed the "scale-midpoint" (rev.freq):
# shift.val <- c(); shift.freq <- c(); rev.freq <- c()
# for(s in unique(shift)){
#   shift.val <- c(shift.val, s)
#   shift.freq <- c(shift.freq, sum(shift == s))
#   rev.freq <- c(rev.freq, sum(rev[shift == s]))
# }
# Initialize dataframe (shift.df)
shift.df <- data.frame(row.names = c("Item", "Shift_value", "Shift_frequency", "Rev_frequency"))
# For each item on the MFQ:
for(n in mfq.names){
# Calculate rating shifts (for each participant: rating in wave 2 - rating in wave 1)
shift <- df[df$WAVE == 2, n] - df[df$WAVE == 1, n]
# Determine whether a rating reversal occured (for each participant: Did their rating cross
# the scale-midpoint?)
rev <- ifelse(df[df$WAVE == 2, n] < midpoint.mfq & df[df$WAVE == 1, n] > midpoint.mfq, 1,
ifelse(df[df$WAVE == 2, n] > midpoint.mfq & df[df$WAVE == 1, n] < midpoint.mfq, 1, 0))
# Record how many rating shifts (shift.freq) and rating reversals (rev.freq) occured for each
# unique value of rating shift (shift.val)
shift.val <- c(); shift.freq <- c(); rev.freq <- c()
for(s in unique(shift)){
shift.val <- c(shift.val, s)
shift.freq <- c(shift.freq, sum(shift == s))
rev.freq <- c(rev.freq, sum(rev[shift == s]))
}
# Append results to shift.df
tab <- data.frame("Item" = n, "Shift_value" = shift.val,
"Shift_frequency" = shift.freq, "Rev_frequency" = rev.freq)
shift.df <- rbind(shift.df, tab)
}
# For each item on the MAC-Q:
for(n in macq.names){
# Calculate rating shifts (for each participant: rating in wave 2 - rating in wave 1)
shift <- df[df$WAVE == 2, n] - df[df$WAVE == 1, n]
# Determine whether a rating reversal occured (for each participant: Did their rating cross
# the scale-midpoint?)
rev <- ifelse(df[df$WAVE == 2, n] < midpoint.macq & df[df$WAVE == 1, n] > midpoint.macq, 1,
ifelse(df[df$WAVE == 2, n] > midpoint.macq & df[df$WAVE == 1, n] < midpoint.macq, 1, 0))
# Record how many rating shifts (shift.freq) and rating reversals (rev.freq) occured for each
# value of rating shift (shift.val)
shift.val <- c(); shift.freq <- c(); rev.freq <- c()
for(s in unique(shift)){
shift.val <- c(shift.val, s)
shift.freq <- c(shift.freq, sum(shift == s))
rev.freq <- c(rev.freq, sum(rev[shift == s]))
}
# Appends results to shift.df
tab <- data.frame("Item" = n, "Shift_value" = shift.val,
"Shift_frequency" = shift.freq, "Rev_frequency" = rev.freq)
shift.df <- rbind(shift.df, tab)
}
# Write shift.df to file
write.csv(x = shift.df, file = "shifts_revs.csv")
# Write shift.df to file
write.csv(x = shift.df, file = "shifts_revs.csv")
getwd()
setwd("C:/Git_Repositories/veni_sysrev")
setwd("C:/Git_Repositories/veni_sysrev")
