cat_shapes <- c(Outcome = "square2", Indicator = "circle2", Cause = "quad2", Protective = "tri2")
legend_shapes <- c("circle2" = 21, "square2" = 22, "quad2" = 23, "tri2" = 24)[cat_shapes]
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$shape <- cat_shapes[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
#min_size <- (strwidth(vert$name[max(nchar(vert$name))]) + strwidth("oo")) * 100
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g1 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
#g <- Rsenal::pruneEdg
#min_size <- (strwidth(vert$label[max(nchar(vert$label))]) + strwidth("oo"))*100
# edge thickness
#E(g)$width <- scales::rescale(sqrt(E(g)$width), to = c(2, 8))
# Plot 2 ------------------------------------------------------------------
df_plot <- data.frame(term1 = df$cat, term2 = "dysregulation", source = df$source)
edg <- df_plot
edg$width = 1
vert <- data.frame(name = unique(c(df_plot$term1, df_plot$term2)), label = pretty_words(unique(c(df_plot$term1, df_plot$term2))), size = 1)
vert <- vert[vert$name %in% unique(c(edg$term1, edg$term2)), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
if(any(!vert$name %in% categ$name)){
write.table(vert$name[!vert$name %in% categ$name], "clipboard", sep = "\n", row.names = FALSE, col.names= FALSE)
stop("Please re-categorize missing vertices.")
}
vert$Category <- categ$category[match(vert$name, categ$name)]
vert$faded <- vert$name %in% df$cat[df$source == "theory"]
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "olivedrab2")
vert$color <- cat_cols[vert$Category]
vert$frame.color <- cat_cols[vert$Category]
vert$shape <- cat_shapes[vert$Category]
# cat_cols <- c(Outcome = "#E5E5E5", Indicator = "#FFC9AD", Cause = "#FFFF66", Protective = "#E6FF6D")
vert$color[vert$faded] <- "#FFFFFF"#cat_cols[vert$Category[vert$faded]]
#min_size <- (strwidth(vert$name[max(nchar(vert$name))]) + strwidth("oo")) * 100
vert$size <- scales::rescale(log(vert$size), c(4, 12))
g2 <- graph_from_data_frame(edg, vertices = vert,
directed = FALSE)
#g <- Rsenal::pruneEdg
#min_size <- (strwidth(vert$label[max(nchar(vert$label))]) + strwidth("oo"))*100
# edge thickness
#E(g)$width <- scales::rescale(sqrt(E(g)$width), to = c(2, 8))
set.seed(2) #4 #2 #3
l1 <- l <- layout_with_fr(g1)
set.seed(33)
l2 <- layout_with_fr(g2)
par(mar=c(0,0,0,0),
mfrow=c(1,2))
plot(g1, edge.curved = 0, layout=l1,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
legend(x=-1.1, y=1.1, names(cat_cols), pch=legend_shapes, col=cat_cols, pt.bg=cat_cols, pt.cex=1.5, cex=.8, bty="n", ncol=1)
plot(g2, edge.curved = 0, layout=l2,
vertex.label.family = "sans",
vertex.label.cex = 0.8,
#vertex.shape = "circle2",
#vertex.frame.color = 'gray40',
vertex.label.color = 'black',      # Color of node names
vertex.label.font = 1,         # Font of node names
vertex.frame.width = 2
)
rmarkdown::render("manuscript.rmd", output_format =  "all")
rmarkdown::render("manuscript.rmd")
legend_shapes <- c("circle2" = 21, "square2" = 22, "quad2" = 23, "tri2" = 24)[cat_shapes]
legend_shapes
cat_shapes <- c(Outcome = "square2", Indicator = "circle2", Cause = "quad2", Protective = "tri2")
legend_shapes <- c("circle2" = 21, "square2" = 22, "quad2" = 23, "tri2" = 24)[cat_shapes]
scale_shapes <- legend_shapes
names(scale_shapes) <- names(cat_shapes)[match(names(legend_shapes), cat_shapes)]
scale_shapes
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
rmarkdown::render("manuscript.rmd")
df <- readRDS("study1_df.RData")
number_docs_words <- yaml::read_yaml("study1_number_docs_words.txt")
nounbydoc <- df[, list(freq = .N), by = list(doc_id = doc, term = word_coded)]
# Set frequency to 1; we're not interpreting word frequency, only occurrence
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
term_freq <- table(colSums(dtm))
# Continue plotting word frequency ----------------------------------------
set.seed(5348)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
term_freqtop <- table(colSums(dtm_top))
term_freq <- as.data.frame.table(term_freq)
term_freq$pruned <- term_freq$Var1 %in% names(term_freqtop)
write_yaml(term_freq, "study1_term_freq_dist.yml")
write_yaml(dim(dtm_top), "study1_dtm_top.yml")
# Wordcloud ---------------------------------------------------------------
## Word frequencies
topterms <- colSums(dtm_top)
baseline <- readRDS("baseline.RData")
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
write.csv(word_freq, "study1_word_freq.csv", row.names = FALSE)
df_plot <- word_freq
df_plot <- df_plot[order(df_plot$Frequency, decreasing = TRUE), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
df_plot$cat <- categ$category[match(df_plot$Word, categ$name)]
df_plot$baseline <- as.character(df_plot$Word %in% baseline)
df_plot$faded <- df_plot$Word %in% baseline
in_graph <- row.names(read.csv("s1_cooc.csv", row.names = 1))
notingraph <- !df_plot$Word %in% in_graph
df_plot$notingraph <- notingraph
italic_labels <- as.character(df_plot$Word)
italic_labels[notingraph] <- sapply(italic_labels[notingraph], function(x){
parse(text = paste0("italic('", x, "')"))
})
# Prettify words
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
df_plot$cat <- ordered(df_plot$cat, levels = c("Outcome", "Indicator", "Cause", "Protective"))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"))+ #, guide = NULL
scale_shape_manual(values = scale_shapes)+#, guide = NULL
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"))+ #, guide = NULL
scale_shape_manual(values = scale_shapes)+#, guide = NULL
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"))+ #, guide = NULL
scale_shape_manual(values = scale_shapes)+#, guide = NULL
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
p + theme(legend.position = "none")
rmarkdown::render("manuscript.rmd")
df_analyze <- data.table(readRDS("study2_df_analyze.RData"))
nounbydoc <- df_analyze[, list(freq = .N), by = list(doc_id = doc_id, term = word_coded)]
number_docs_words2 <- c(docs = length(unique(nounbydoc$doc_id)), words = length(unique(nounbydoc$term)))
nounbydoc$freq <- 1
dtm <- udpipe::document_term_matrix(document_term_frequencies(nounbydoc))
topterms <- colSums(dtm)
term_freq <- table(topterms)
topterms <- sort(topterms, decreasing = TRUE)
# Select most common terms ------------------------------------------------
set.seed(720)
dtm_top <- dtm[, select_words(dtm, .975)]
dtm_top <- dtm_top[rowSums(dtm_top) > 0, ]
term_freqtop <- table(colSums(dtm_top))
term_freq <- as.data.frame.table(term_freq)
term_freq$pruned <- term_freq[[1]] %in% names(term_freqtop)
write_yaml(term_freq, "study2_term_freq_dist.yml")
dtm_top
topterms <- colSums(dtm_top)
topterms <- sort(topterms, decreasing = TRUE)
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
write.csv(word_freq, "study2_word_freq.csv", row.names = FALSE)
df_plot <- word_freq
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Frequency <- sqrt(df_plot$Frequenc
y)
df_plot$Frequency <- sqrt(df_plot$Frequency)
topterms <- colSums(dtm_top)
baseline <- readRDS("baseline.RData")
word_freq <- data.frame(Word = names(topterms), Frequency = topterms, row.names = NULL)
df_plot <- word_freq
df_plot <- df_plot[order(df_plot$Frequency, decreasing = TRUE), ]
categ <- read.csv("study1_categorization.csv", stringsAsFactors = FALSE)
df_plot$cat <- categ$category[match(df_plot$Word, categ$name)]
df_plot$faded <- df_plot$Word %in% baseline
# Tag words that are not in the cooccurrence graph
in_graph <- row.names(read.csv("s2_cooc.csv", row.names = 1))
notingraph <- !df_plot$Word %in% in_graph
df_plot$notingraph <- notingraph
italic_labels <- as.character(df_plot$Word)
italic_labels[notingraph] <- sapply(italic_labels[notingraph], function(x){
parse(text = paste0("italic('", x, "')"))
})
df_plot$Word <- pretty_words(df_plot$Word)
df_plot$Word <- ordered(df_plot$Word, levels = df_plot$Word[order(df_plot$Frequency)])
cat_cols <- c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")
df_plot$cat <- ordered(df_plot$cat, levels = c("Outcome", "Indicator", "Cause", "Protective"))
write_yaml(df_plot$Word, "s2_words.yml")
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"))+#, guide = NULL
scale_shape_manual(values = scale_shapes)+#, guide = NULL
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"))+ #, guide = NULL
scale_shape_manual(values = scale_shapes)+#, guide = NULL
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen")) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1) ) ) )
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1) ) ) )
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1)))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
scale_shapes
levels(df_plot$cat
)
class(df_plot$cat)
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(colour = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(overall = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(shape = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
p <- ggplot(df_plot, aes(y = Word, x = Frequency)) +
geom_segment(aes(x = 0, xend = Frequency,
y = Word, yend = Word, linetype = notingraph), colour = "grey50"
) +
geom_vline(xintercept = 0, colour = "grey50", linetype = 1) + xlab("Word frequency") +
geom_point(data = df_plot[df_plot$faded, ], aes(colour = cat, shape = cat), fill = "white", size = 1.5) +
geom_point(data = df_plot[!df_plot$faded, ], aes(colour = cat, fill = cat, shape = cat), size = 1.5) +
scale_colour_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL)+#
scale_shape_manual(values = scale_shapes, guide = NULL)+#
scale_fill_manual(values = c(Outcome = "gray50", Indicator = "tomato", Cause = "gold", Protective = "forestgreen"), guide = NULL) +
scale_x_log10() +
#scale_y_discrete(labels = italic_labels) +
scale_linetype_manual(values = c("TRUE" = 3, "FALSE" = 1), guide = NULL) +
guides(fill = guide_legend(title = NULL,
override.aes = list(linetype = c(1, 1, 1,1),
shape = scale_shapes,
colour = cat_cols[names(scale_shapes)]))) +
theme_bw() + theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), axis.title.y = element_blank(),
legend.position = c(.70,.125),
legend.title = element_blank(),
axis.text.y = element_text(hjust=0, vjust = 0, size = 6))
ggsave("s2_varimp.png", p, device = "png", width = 7, height = 14, units = "cm")
rmarkdown::render("manuscript.rmd")
worcs::git_update("make images grayscale friendly")
worcs::git_update("restructure discussion")
rmarkdown::render("manuscript.rmd")
renv::restore()
install.packages("DT")
renv::snapshot()
renv::restore()
renv::upgrade()
renv::restore()
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::check_installed()
p <- readRDS("s1_varimp.RData")
p
eval(p)
plot(p)
library(ggplot2)
renv::restore()
library(ggplot2)
renv::update()
renv::upgrade()
install.packages("renv")
renv::init()
renv::init()
renv::init()
gert::git_remote_remove("origin")
gert::git_remote_add("git@github.com:amyvdham/veni_sysrev.git")
gert:: git_push()
rmarkdown::render("manuscript.Rmd")
renv::restore()
rmarkdown::render("manuscript.Rmd")
install.packages("worcs", dependencies = TRUE)
worcs::git_update()
renv::status()
renv::restore()
Sys.getenv("R_MAKEVARS_USER")
writeLines(readLines("~/.R/Makevars"))
renv::status()
renv::restore()
renv::status()
renv::restore()
renv::snapshot()
worcs:: git_update()
